[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/audio/BinauralPanner.js",
    "memberof": null,
    "longname": "src/audio/BinauralPanner.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * @fileOverview Multi-source binaural panner.\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2016 IRCAM, Paris, France\n * @license CECILL-2.1\n */\n\nimport glMatrix from 'gl-matrix';\n\nimport { glToTyped, typedToGl } from '../geometry/coordinates';\n\nimport HrtfSet from '../sofa/HrtfSet';\nimport Source from './Source';\n\n/**\n * Binaural panner with multiple sources and a listener.\n */\nexport class BinauralPanner {\n\n  /**\n   * Constructs an HRTF set. Note that the filter positions are applied\n   * during the load of an HRTF URL.\n   *\n   * See {@link HrtfSet}.\n   * See {@link BinauralPanner#loadHrtfSet}.\n   *\n   * @param {Object} options\n   * @param {AudioContext} options.audioContext mandatory for the creation\n   * of FIR audio buffers\n   * @param {coordinatesType} [options.positionsType='gl']\n   * {@link BinauralPanner#positionsType}\n   * @param {Number} [options.sourceCount=1]\n   * @param {Array.<coordinates>} [options.sourcePositions=undefined] must\n   * be of length options.sourceCount {@link BinauralPanner#sourcePositions}\n   * @param {Number} [options.crossfadeDuration] in seconds.\n   * @param {coordinatesType} [options.filterPositionsType=options.positionsType]\n   * {@link BinauralPanner#filterPositionsType}\n   * @param {Array.<coordinates>} [options.filterPositions=undefined]\n   * array of positions to filter. Use undefined to use all positions from the HRTF set.\n   * {@link BinauralPanner#filterPositions}\n   * @param {Boolean} [options.filterAfterLoad=false] true to filter after\n   * full load of SOFA file\n   * @param {coordinates} [options.listenerPosition=[0,0,0]]\n   * {@link BinauralPanner#listenerPosition}\n   * @param {coordinates} [options.listenerUp=[0,1,0]]\n   * {@link BinauralPanner#listenerUp}\n   * @param {coordinates} [options.listenerView=[0,0,-1]]\n   * {@link BinauralPanner#listenerView}\n   */\n  constructor(options = {}) {\n    this._audioContext = options.audioContext;\n\n    this.positionsType = options.positionsType;\n\n    const sourceCount = (typeof options.sourceCount !== 'undefined'\n                         ? options.sourceCount\n                         : 1);\n\n    this._listenerOutdated = true;\n    this._listenerLookAt = [];\n\n    this._listenerPosition = [];\n    this.listenerPosition = (typeof options.listenerPosition !== 'undefined'\n                             ? options.listenerPosition\n                             : glToTyped([], [0, 0, 0], this.positionsType) );\n\n    this._listenerUp = [];\n    this.listenerUp = (typeof options.listenerUp !== 'undefined'\n                       ? options.listenerUp\n                       : glToTyped([], [0, 1, 0], this.positionsType) );\n\n    this._listenerView = [];\n    this.listenerView = (typeof options.listenerView !== 'undefined'\n                         ? options.listenerView\n                         : glToTyped([], [0, 0, -1], this.positionsType) );\n\n    this._sourcesOutdated = new Array(sourceCount).fill(true);\n\n    this._sources = this._sourcesOutdated.map( () => {\n      return new Source({\n        audioContext: this._audioContext,\n        crossfadeDuration: options.crossfadeDuration,\n      });\n    });\n\n    this._sourcePositionsAbsolute = this._sourcesOutdated.map( () => {\n      return [0, 0, 1]; // allocation and default value\n    });\n\n    this._sourcePositionsRelative = this._sourcesOutdated.map( () => {\n      return [0, 0, 1]; // allocation and default value\n    });\n\n    this.hrtfSet = (typeof options.hrtfSet !== 'undefined'\n                    ? options.hrtfSet\n                    : new HrtfSet({\n                      audioContext: this._audioContext,\n                      positionsType: 'gl',\n                    }) );\n\n    this.filterPositionsType = options.filterPositionsType;\n    this.filterPositions = options.filterPositions;\n    this.filterAfterLoad = options.filterAfterLoad;\n\n    if (typeof options.sourcePositions !== 'undefined') {\n      this.sourcePositions = options.sourcePositions;\n    }\n\n    this.update();\n  }\n\n  // ----------- accessors\n\n  /**\n   * Set coordinates type for positions.\n   *\n   * @param {coordinatesType} [type='gl']\n   */\n  set positionsType(type) {\n    this._positionsType = (typeof type !== 'undefined'\n                           ? type\n                           : 'gl');\n  }\n\n  /**\n   * Get coordinates type for positions.\n   *\n   * @returns {coordinatesType}\n   */\n  get positionsType() {\n    return this._positionsType;\n  }\n\n  /**\n   * Refer an external HRTF set, and update sources. Its positions\n   * coordinate type must be 'gl'.\n   *\n   * See {@link HrtfSet}.\n   * See {@link BinauralPanner#update}.\n   *\n   * @param {HrtfSet} hrtfSet\n   * @throws {Error} when hrtfSet in undefined or hrtfSet.positionsType is\n   * not 'gl'.\n   */\n  set hrtfSet(hrtfSet) {\n    if (typeof hrtfSet !== 'undefined') {\n      if (hrtfSet.positionsType !== 'gl') {\n        throw new Error(`positions type of HRTF set must be 'gl' `\n                        + `(and not '${hrtfSet.positionsType}') `\n                        `for use with BinauralPannerNode`);\n      }\n      this._hrtfSet = hrtfSet;\n    } else {\n      throw new Error(`Undefined HRTF set for BinauralPanner`);\n    }\n\n    // update HRTF set references\n    this._sourcesOutdated.fill(true);\n    this._sources.forEach( (source) => {\n      source.hrtfSet = this._hrtfSet;\n    });\n\n    this.update();\n  }\n\n  /**\n   * Get the HrtfSet.\n   *\n   * @returns {HrtfSet}\n   */\n  get hrtfSet() {\n    return this._hrtfSet;\n  }\n\n  // ------------- HRTF set proxies\n\n  /**\n   * Set the filter positions of the HRTF set\n   *\n   * See {@link HrtfSet#filterPositions}.\n   *\n   * @param {Array.<coordinates>} positions\n   */\n  set filterPositions(positions) {\n    this._hrtfSet.filterPositions = positions;\n  }\n\n  /**\n   * Get the filter positions of the HRTF set\n   *\n   * See {@link HrtfSet#filterPositions}.\n   *\n   * @return {Array.<coordinates>} positions\n   */\n  get filterPositions() {\n    return this._hrtfSet.filterPositions;\n  }\n\n  /**\n   * Set coordinates type for positions.\n   *\n   * @param {coordinatesType} [type='gl']\n   */\n  set filterPositionsType(type) {\n    this._hrtfSet.filterPositionsType = (typeof type !== 'undefined'\n                                         ? type\n                                         : this.positionsType);\n  }\n\n  /**\n   * Get coordinates type for filters.\n   *\n   * @returns {coordinatesType}\n   */\n  get filterPositionsType() {\n    return this._hrtfSet.filterPositionsType;\n  }\n\n  /**\n   * Set post-filtering flag. When false, try to load a partial set of\n   * HRTF.\n   *\n   * @param {Boolean} [post=false]\n   */\n   set filterAfterLoad(post) {\n     this._hrtfSet.filterAfterLoad = post;\n   }\n\n  /**\n   * Get post-filtering flag. When false, try to load a partial set of\n   * HRTF.\n   *\n   * @returns {Boolean}\n   */\n  get filterAfterLoad() {\n    return this._hrtfSet.filterAfterLoad;\n  }\n\n  /**\n   * Set listener position. It will update the relative positions of the\n   * sources after a call to the update method.\n   *\n   * Default value is [0, 0, 0] in 'gl' coordinates.\n   *\n   * See {@link BinauralPanner#update}.\n   *\n   * @param {coordinates} positionRequest\n   */\n  set listenerPosition(positionRequest) {\n    typedToGl(this._listenerPosition, positionRequest, this._positionsType);\n    this._listenerOutdated = true;\n  }\n\n  /**\n   * Get listener position.\n   *\n   * @returns {coordinates}\n   */\n  get listenerPosition() {\n    return glToTyped([], this._listenerPosition, this._positionsType);\n  }\n\n  /**\n   * Set listener up direction (not an absolute position). It will update\n   * the relative positions of the sources after a call to the update\n   * method.\n   *\n   * Default value is [0, 1, 0] in 'gl' coordinates.\n   *\n   * See {@link BinauralPanner#update}.\n   *\n   * @param {coordinates} positionRequest\n   */\n  set listenerUp(upRequest) {\n    typedToGl(this._listenerUp, upRequest, this._positionsType);\n    this._listenerOutdated = true;\n  }\n\n  /**\n   * Get listener up direction.\n   *\n   * @returns {coordinates}\n   */\n  get listenerUp() {\n    return glToTyped([], this._listenerUp, this._positionsType);\n  }\n\n  /**\n   * Set listener view, as an aiming position. It is an absolute position,\n   * and not a direction. It will update the relative positions of the\n   * sources after a call to the update method.\n   *\n   * Default value is [0, 0, -1] in 'gl' coordinates.\n   *\n   * See {@link BinauralPanner#update}.\n   *\n   * @param {coordinates} positionRequest\n   */\n  set listenerView(viewRequest) {\n    typedToGl(this._listenerView, viewRequest, this._positionsType);\n    this._listenerOutdated = true;\n  }\n\n  /**\n   * Get listener view direction.\n   *\n   * @returns {coordinates}\n   */\n  get listenerView() {\n    return glToTyped([], this._listenerView, this._positionsType);\n  }\n\n  /**\n   * Set the sources positions. It will update the relative positions after\n   * a call to the update method.\n   *\n   * See {@link BinauralPanner#update}.\n   * See {@link BinauralPanner#setSourcePositionByIndex}.\n   *\n   * @param {Array.<coordinates>} positionsRequest\n   * @throws {Error} if the length of positionsRequest is not the same as\n   * the number of sources\n   */\n  set sourcePositions(positionsRequest) {\n    if (positionsRequest.length !== this._sources.length) {\n      throw new Error(`Bad number of source positions: `\n                      + `${positionsRequest.length} `\n                      + `instead of ${this._sources.length}`);\n    }\n\n    positionsRequest.forEach( (position, index) => {\n      this._sourcesOutdated[index] = true;\n      this.setSourcePositionByIndex(index, position);\n    });\n  }\n\n  /**\n   * Get the source positions.\n   *\n   * @returns {Array.<coordinates>}\n   */\n  get sourcePositions() {\n    return this._sourcePositionsAbsolute.map( (position) => {\n      return glToTyped([], position, this.positionsType);\n    });\n  }\n\n  /**\n   * Set the position of one source. It will update the corresponding\n   * relative position after a call to the update method.\n   *\n   * See {@link BinauralPanner#update}.\n   *\n   * @param {Number} index\n   * @param {coordinates} positionRequest\n   * @returns {this}\n   */\n  setSourcePositionByIndex(index, positionRequest) {\n    this._sourcesOutdated[index] = true;\n    typedToGl(this._sourcePositionsAbsolute[index],\n              positionRequest,\n              this.positionsType);\n\n    return this;\n  }\n\n  /**\n   * Get the position of one source.\n   *\n   * @param {Number} index\n   * @returns {coordinates}\n   */\n  getSourcePositionByIndex(index) {\n    return glToTyped([], this._sourcePositionsAbsolute[index],\n                     this.positionsType);\n  }\n\n  // ----------- public methods\n\n  /**\n   * Load an HRTF set form an URL, and update sources.\n   *\n   * See {@link HrtfSet#load}.\n   *\n   * @param {String} sourceUrl\n   * @returns {Promise.<this|Error>} resolve when URL successfully\n   * loaded.\n   */\n  loadHrtfSet(sourceUrl) {\n    return this._hrtfSet.load(sourceUrl)\n      .then( () => {\n        this._sourcesOutdated.fill(true);\n        this.update();\n        return this;\n      });\n  }\n\n  /**\n   * Connect the input of a source.\n   *\n   * @param {Number} index\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToConnect\n   * @param {Number} [output=0] output to connect from\n   * @param {Number} [input=0] input to connect to\n   * @returns {this}\n   */\n  connectInputByIndex(index, nodesToConnect, output, input) {\n    this._sources[index].connectInput(nodesToConnect, output, input);\n\n    return this;\n  }\n\n  /**\n   * Disconnect the input of one source.\n   *\n   * @param {Number} index\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToDisconnect disconnect\n   * all when undefined.\n   * @returns {this}\n   */\n  disconnectInputByIndex(index, nodesToDisconnect) {\n    this._sources[index].disconnectInput(nodesToDisconnect);\n\n    return this;\n  }\n\n  /**\n   * Disconnect the input of each source.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToDisconnect disconnect\n   * all when undefined.\n   * @returns {this}\n   */\n  disconnectInputs(nodesToDisconnect) {\n    const nodes = (Array.isArray(nodesToDisconnect)\n                   ? nodesToDisconnect\n                   : [nodesToDisconnect] ); // make array\n\n    this._sources.forEach( (source, index) => {\n      source.disconnectInput(nodes[index]);\n    });\n\n    return this;\n  }\n\n  /**\n   * Connect the output of a source.\n   *\n   * @param {Number} index\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToConnect\n   * @param {Number} [output=0] output to connect from\n   * @param {Number} [input=0] input to connect to\n   * @returns {this}\n   */\n  connectOutputByIndex(index, nodesToConnect, output, input) {\n    this._sources[index].connectOutput(nodesToConnect, output, input);\n\n    return this;\n  }\n\n  /**\n   * Disconnect the output of a source.\n   *\n   * @param {Number} index\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToDisconnect disconnect\n   * all when undefined.\n   * @returns {this}\n   */\n  disconnectOutputByIndex(index, nodesToDisconnect) {\n    this._sources[index].disconnectOutput(nodesToDisconnect);\n\n    return this;\n  }\n\n  /**\n   * Connect each output of each source. Note that the number of nodes to\n   * connect must match the number of sources.\n   *\n   * See {@link BinauralPanner#connectOutputByIndex}.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToConnect\n   * @param {Number} [output=0] output to connect from\n   * @param {Number} [input=0] input to connect to\n   * @returns {this}\n   */\n  connectOutputs(nodesToConnect, output, input) {\n    this._sources.forEach( (source) => {\n      source.connectOutput(nodesToConnect, output, input);\n    });\n\n    return this;\n  }\n\n  /**\n   * Disconnect the output of each source.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToDisconnect\n   * @returns {this}\n   */\n  disconnectOutputs(nodesToDisconnect) {\n    this._sources.forEach( (source) => {\n      source.disconnectOutput(nodesToDisconnect);\n    });\n\n    return this;\n  }\n\n  /**\n   * Update the sources filters, according to possible changes in listener,\n   * and source positions.\n   *\n   * @returns {this}\n   */\n  update() {\n    if (this._listenerOutdated) {\n      glMatrix.mat4.lookAt(this._listenerLookAt,\n                           this._listenerPosition,\n                           this._listenerView,\n                           this._listenerUp);\n\n      this._sourcesOutdated.fill(true);\n    }\n\n    if (this._hrtfSet.isReady) {\n      this._sourcePositionsAbsolute.forEach( (positionAbsolute, index) => {\n        if (this._sourcesOutdated[index] ) {\n          glMatrix.vec3.transformMat4(this._sourcePositionsRelative[index],\n                                      positionAbsolute,\n                                      this._listenerLookAt);\n\n          this._sources[index].position = this._sourcePositionsRelative[index];\n\n          this._sourcesOutdated[index] = false;\n        }\n      });\n    }\n\n    return this;\n  }\n}\n\nexport default BinauralPanner;\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BinauralPanner",
    "memberof": "src/audio/BinauralPanner.js",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner",
    "access": null,
    "export": true,
    "importPath": "binaural/src/audio/BinauralPanner.js",
    "importStyle": "{BinauralPanner}",
    "description": "Binaural panner with multiple sources and a listener.",
    "lineNumber": 18,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#constructor",
    "access": null,
    "description": "Constructs an HRTF set. Note that the filter positions are applied\nduring the load of an HRTF URL.\nSee {@link HrtfSet}.\nSee {@link BinauralPanner#loadHrtfSet}.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "name": "options.audioContext",
        "description": "mandatory for the creation\nof FIR audio buffers"
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gl'",
        "defaultRaw": "'gl'",
        "name": "options.positionsType",
        "description": "{@link BinauralPanner#positionsType}"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.sourceCount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "options.sourcePositions",
        "description": "must\nbe of length options.sourceCount {@link BinauralPanner#sourcePositions}"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.crossfadeDuration",
        "description": "in seconds."
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "options.positionsType",
        "defaultRaw": "options.positionsType",
        "name": "options.filterPositionsType",
        "description": "{@link BinauralPanner#filterPositionsType}"
      },
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "options.filterPositions",
        "description": "array of positions to filter. Use undefined to use all positions from the HRTF set.\n{@link BinauralPanner#filterPositions}"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.filterAfterLoad",
        "description": "true to filter after\nfull load of SOFA file"
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "options.listenerPosition",
        "description": "{@link BinauralPanner#listenerPosition}"
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,1,0]",
        "defaultRaw": [
          0,
          1,
          0
        ],
        "name": "options.listenerUp",
        "description": "{@link BinauralPanner#listenerUp}"
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,-1]",
        "defaultRaw": [
          0,
          0,
          -1
        ],
        "name": "options.listenerView",
        "description": "{@link BinauralPanner#listenerView}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_audioContext",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_audioContext",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "positionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#positionsType",
    "access": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerOutdated",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerOutdated",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerLookAt",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerLookAt",
    "access": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerPosition",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerPosition",
    "access": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "listenerPosition",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerPosition",
    "access": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerUp",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerUp",
    "access": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "listenerUp",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerUp",
    "access": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerView",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerView",
    "access": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "listenerView",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerView",
    "access": null,
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sourcesOutdated",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_sourcesOutdated",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sources",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_sources",
    "access": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sourcePositionsAbsolute",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_sourcePositionsAbsolute",
    "access": null,
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 16,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sourcePositionsRelative",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_sourcePositionsRelative",
    "access": null,
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "hrtfSet",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#hrtfSet",
    "access": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "filterPositionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterPositionsType",
    "access": null,
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "filterPositions",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterPositions",
    "access": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "filterAfterLoad",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterAfterLoad",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "sourcePositions",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#sourcePositions",
    "access": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 22,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "positionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#positionsType",
    "access": null,
    "description": "Set coordinates type for positions.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gl'",
        "defaultRaw": "'gl'",
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_positionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_positionsType",
    "access": null,
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "positionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#positionsType",
    "access": null,
    "description": "Get coordinates type for positions.",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinatesType}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinatesType"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "hrtfSet",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#hrtfSet",
    "access": null,
    "description": "Refer an external HRTF set, and update sources. Its positions\ncoordinate type must be 'gl'.\nSee {@link HrtfSet}.\nSee {@link BinauralPanner#update}.",
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "HrtfSet"
        ],
        "spread": false,
        "optional": false,
        "name": "hrtfSet",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when hrtfSet in undefined or hrtfSet.positionsType is\nnot 'gl'."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_hrtfSet",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_hrtfSet",
    "access": null,
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "hrtfSet",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#hrtfSet",
    "access": null,
    "description": "Get the HrtfSet.",
    "lineNumber": 171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HrtfSet}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HrtfSet"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "filterPositions",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterPositions",
    "access": null,
    "description": "Set the filter positions of the HRTF set\nSee {@link HrtfSet#filterPositions}.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filterPositions",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterPositions",
    "access": null,
    "description": "Get the filter positions of the HRTF set\nSee {@link HrtfSet#filterPositions}.",
    "lineNumber": 195,
    "return": {
      "nullable": null,
      "types": [
        "Array.<coordinates>"
      ],
      "spread": false,
      "description": "positions"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "filterPositionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterPositionsType",
    "access": null,
    "description": "Set coordinates type for positions.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gl'",
        "defaultRaw": "'gl'",
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filterPositionsType",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterPositionsType",
    "access": null,
    "description": "Get coordinates type for filters.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinatesType}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinatesType"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "filterAfterLoad",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterAfterLoad",
    "access": null,
    "description": "Set post-filtering flag. When false, try to load a partial set of\nHRTF.",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "post",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filterAfterLoad",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#filterAfterLoad",
    "access": null,
    "description": "Get post-filtering flag. When false, try to load a partial set of\nHRTF.",
    "lineNumber": 235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "listenerPosition",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerPosition",
    "access": null,
    "description": "Set listener position. It will update the relative positions of the\nsources after a call to the update method.\nDefault value is [0, 0, 0] in 'gl' coordinates.\nSee {@link BinauralPanner#update}.",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerOutdated",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerOutdated",
    "access": null,
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "listenerPosition",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerPosition",
    "access": null,
    "description": "Get listener position.",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "listenerUp",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerUp",
    "access": null,
    "description": "Set listener up direction (not an absolute position). It will update\nthe relative positions of the sources after a call to the update\nmethod.\nDefault value is [0, 1, 0] in 'gl' coordinates.\nSee {@link BinauralPanner#update}.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerOutdated",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerOutdated",
    "access": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "listenerUp",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerUp",
    "access": null,
    "description": "Get listener up direction.",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "listenerView",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerView",
    "access": null,
    "description": "Set listener view, as an aiming position. It is an absolute position,\nand not a direction. It will update the relative positions of the\nsources after a call to the update method.\nDefault value is [0, 0, -1] in 'gl' coordinates.\nSee {@link BinauralPanner#update}.",
    "lineNumber": 299,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_listenerOutdated",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#_listenerOutdated",
    "access": null,
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "listenerView",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#listenerView",
    "access": null,
    "description": "Get listener view direction.",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "sourcePositions",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#sourcePositions",
    "access": null,
    "description": "Set the sources positions. It will update the relative positions after\na call to the update method.\nSee {@link BinauralPanner#update}.\nSee {@link BinauralPanner#setSourcePositionByIndex}.",
    "lineNumber": 324,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": false,
        "name": "positionsRequest",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the length of positionsRequest is not the same as\nthe number of sources"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "sourcePositions",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#sourcePositions",
    "access": null,
    "description": "Get the source positions.",
    "lineNumber": 342,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<coordinates>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<coordinates>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "setSourcePositionByIndex",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#setSourcePositionByIndex",
    "access": null,
    "description": "Set the position of one source. It will update the corresponding\nrelative position after a call to the update method.\nSee {@link BinauralPanner#update}.",
    "lineNumber": 358,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSourcePositionByIndex",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#getSourcePositionByIndex",
    "access": null,
    "description": "Get the position of one source.",
    "lineNumber": 373,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "loadHrtfSet",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#loadHrtfSet",
    "access": null,
    "description": "Load an HRTF set form an URL, and update sources.\nSee {@link HrtfSet#load}.",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<this|Error>} resolve when URL successfully\nloaded."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<this",
        "Error>"
      ],
      "spread": false,
      "description": "resolve when URL successfully\nloaded."
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connectInputByIndex",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#connectInputByIndex",
    "access": null,
    "description": "Connect the input of a source.",
    "lineNumber": 407,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToConnect",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "output",
        "description": "output to connect from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "input",
        "description": "input to connect to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnectInputByIndex",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#disconnectInputByIndex",
    "access": null,
    "description": "Disconnect the input of one source.",
    "lineNumber": 421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToDisconnect",
        "description": "disconnect\nall when undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnectInputs",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#disconnectInputs",
    "access": null,
    "description": "Disconnect the input of each source.",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToDisconnect",
        "description": "disconnect\nall when undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connectOutputByIndex",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#connectOutputByIndex",
    "access": null,
    "description": "Connect the output of a source.",
    "lineNumber": 455,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToConnect",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "output",
        "description": "output to connect from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "input",
        "description": "input to connect to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnectOutputByIndex",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#disconnectOutputByIndex",
    "access": null,
    "description": "Disconnect the output of a source.",
    "lineNumber": 469,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToDisconnect",
        "description": "disconnect\nall when undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connectOutputs",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#connectOutputs",
    "access": null,
    "description": "Connect each output of each source. Note that the number of nodes to\nconnect must match the number of sources.\nSee {@link BinauralPanner#connectOutputByIndex}.",
    "lineNumber": 486,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToConnect",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "output",
        "description": "output to connect from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "input",
        "description": "input to connect to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnectOutputs",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#disconnectOutputs",
    "access": null,
    "description": "Disconnect the output of each source.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToDisconnect",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/audio/BinauralPanner.js~BinauralPanner",
    "longname": "src/audio/BinauralPanner.js~BinauralPanner#update",
    "access": null,
    "description": "Update the sources filters, according to possible changes in listener,\nand source positions.",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/audio/Source.js",
    "memberof": null,
    "longname": "src/audio/Source.js",
    "access": null,
    "description": null,
    "lineNumber": 13,
    "content": "/**\n * @fileOverview Source for binaural processing.\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n/**\n * Single source.\n *\n * See {@link BinauralPanner}.\n */\nexport class Source {\n\n  /**\n   * Construct a source, with and AudioContext and an HrtfSet.\n   *\n   * See {@link HrtfSet}.\n   *\n   * @param {Object} options\n   * @param {AudioContext} options.audioContext mandatory for the creation\n   * of FIR audio buffers\n   * @param {HrtfSet} hrtfSet {@link Source#hrtfSet}\n   * @param {coordinate} [position=[0,0,0]] in 'gl' coordinates type.\n   * {@link Source#position}\n   * @param {Number} [crossfadeDuration] in seconds\n   * {@link Source#crossfadeDuration}\n   */\n  constructor(options = {}) {\n    this._audioContext = options.audioContext;\n    this._hrtfSet = options.hrtfSet;\n\n    this._convolverCurrent = this._audioContext.createConvolver();\n    this._convolverCurrent.normalize = false;\n\n    this._gainCurrent = this._audioContext.createGain();\n    this._convolverCurrent.connect(this._gainCurrent);\n\n    this._convolverNext = this._audioContext.createConvolver();\n    this._convolverNext.normalize = false;\n\n    this._gainNext = this._audioContext.createGain();\n    this._convolverNext.connect(this._gainNext);\n\n    this.crossfadeDuration = options.crossfadeDuration;\n\n    this._crossfadeAfterTime = this._audioContext.currentTime;\n    this._crossfadeTimeout = undefined;\n\n    // set position when everything is ready\n    if (typeof options.position !== 'undefined') {\n      this.position = options.position;\n    }\n  }\n\n  // ----------- accessors\n\n  /**\n   * Set the crossfade duration when the position changes.\n   *\n   * @param {Number} [duration=0.02] in seconds\n   */\n  set crossfadeDuration(duration = 0.02) {\n    this._crossfadeDuration = duration;\n  }\n\n  /**\n   * Get the crossfade duration when the position changes.\n   *\n   * @returns {Number} in seconds\n   */\n  get crossfadeDuration() {\n    return this._crossfadeDuration;\n  }\n\n  /**\n   * Refer an external HRTF set.\n   *\n   * @param {HrtfSet} hrtfSet\n   */\n  set hrtfSet(hrtfSet) {\n    this._hrtfSet = hrtfSet;\n  }\n\n  /**\n   * Get the HrtfSet.\n   *\n   * @returns {HrtfSet}\n   */\n  get hrtfSet() {\n    return this._hrtfSet;\n  }\n\n  /**\n   * Set the position of the source and updates.\n   *\n   * @param {coordinates} positionRequest\n   */\n  set position(positionRequest) {\n    clearTimeout(this._crossfadeTimeout);\n    const now = this._audioContext.currentTime;\n    if (now >= this._crossfadeAfterTime) {\n      this._crossfadeAfterTime = now + this._crossfadeDuration;\n\n      // swap\n      let tmp = this._convolverCurrent;\n      this._convolverCurrent = this._convolverNext;\n      this._convolverNext = tmp;\n\n      tmp = this._gainCurrent;\n      this._gainCurrent = this._gainNext;\n      this._gainNext = tmp;\n\n      this._convolverNext.buffer = this._hrtfSet.nearestFir(positionRequest);\n\n      // fade in next\n      this._gainNext.gain.cancelScheduledValues(now);\n      this._gainNext.gain.setValueAtTime(0, now);\n      this._gainNext.gain.linearRampToValueAtTime(\n        1, now + this._crossfadeDuration);\n\n      // fade out current\n      this._gainCurrent.gain.cancelScheduledValues(now);\n      this._gainCurrent.gain.setValueAtTime(1, now);\n      this._gainCurrent.gain.linearRampToValueAtTime(\n        0, now + this._crossfadeDuration);\n    } else {\n      // re-schedule later\n      this._crossfadeTimeout = setTimeout( () => {\n        this.position = positionRequest;\n      }, 0.02);\n    }\n\n  }\n\n  // ----------- public methods\n\n  /**\n   * Connect the input of a source.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToConnect\n   * @param {Number} [output=0] output to connect from\n   * @param {Number} [input=0] input to connect to\n   * @returns {this}\n   */\n  connectInput(nodesToConnect, output, input) {\n    const nodes = (Array.isArray(nodesToConnect)\n                   ? nodesToConnect\n                   : [nodesToConnect] ); // make array\n\n    nodes.forEach( (node) => {\n      node.connect(this._convolverCurrent, output, input);\n      node.connect(this._convolverNext, output, input);\n    });\n\n    return this;\n  }\n\n  /**\n   * Disconnect the input of a source.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToDisconnect disconnect\n   * all when undefined.\n   * @returns {this}\n   */\n  disconnectInput(nodesToDisconnect) {\n    const nodes = (Array.isArray(nodesToDisconnect)\n                   ? nodesToDisconnect\n                   : [nodesToDisconnect] ); // make array\n\n    nodes.forEach( (node) => {\n      node.disconnect(this._convolverCurrent);\n      node.disconnect(this._convolverNext);\n    });\n\n    return this;\n  }\n\n  /**\n   * Connect the output of a source.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToConnect\n   * @param {Number} [output=0] output to connect from\n   * @param {Number} [input=0] input to connect to\n   * @returns {this}\n   */\n  connectOutput(nodesToConnect, output, input) {\n    const nodes = (Array.isArray(nodesToConnect)\n                   ? nodesToConnect\n                   : [nodesToConnect] ); // make array\n\n    nodes.forEach( (node) => {\n      this._gainCurrent.connect(node, output, input);\n      this._gainNext.connect(node, output, input);\n    });\n\n    return this;\n  }\n\n  /**\n   * Disconnect the output of a source.\n   *\n   * @param {(AudioNode|Array.<AudioNode>)} nodesToDisconnect disconnect\n   * all when undefined.\n   * @returns {this}\n   */\n  disconnectOutput(nodesToDisconnect) {\n    if (typeof nodesToDisconnect === 'undefined') {\n      // disconnect all\n      this._gainCurrent.disconnect();\n      this._gainNext.disconnect();\n    } else {\n      const nodes = (Array.isArray(nodesToDisconnect)\n                     ? nodesToDisconnect\n                     : [nodesToDisconnect] ); // make array\n\n      nodes.forEach( (node) => {\n        this._gainCurrent.disconnect(node);\n        this._gainNext.disconnect(node);\n      });\n    }\n\n    return this;\n  }\n\n}\n\nexport default Source;\n"
  },
  {
    "__docId__": 57,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Source",
    "memberof": "src/audio/Source.js",
    "longname": "src/audio/Source.js~Source",
    "access": null,
    "export": true,
    "importPath": "binaural/src/audio/Source.js",
    "importStyle": "{Source}",
    "description": "Single source.\nSee {@link BinauralPanner}.",
    "lineNumber": 13,
    "interface": false
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#constructor",
    "access": null,
    "description": "Construct a source, with and AudioContext and an HrtfSet.\nSee {@link HrtfSet}.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "name": "options.audioContext",
        "description": "mandatory for the creation\nof FIR audio buffers"
      },
      {
        "nullable": null,
        "types": [
          "HrtfSet"
        ],
        "spread": false,
        "optional": false,
        "name": "hrtfSet",
        "description": "{@link Source#hrtfSet}"
      },
      {
        "nullable": null,
        "types": [
          "coordinate"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "position",
        "description": "in 'gl' coordinates type.\n{@link Source#position}"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "crossfadeDuration",
        "description": "in seconds\n{@link Source#crossfadeDuration}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_audioContext",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_audioContext",
    "access": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_hrtfSet",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_hrtfSet",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_convolverCurrent",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_convolverCurrent",
    "access": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_gainCurrent",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_gainCurrent",
    "access": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_convolverNext",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_convolverNext",
    "access": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_gainNext",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_gainNext",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "crossfadeDuration",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#crossfadeDuration",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_crossfadeAfterTime",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_crossfadeAfterTime",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_crossfadeTimeout",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_crossfadeTimeout",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "position",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#position",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "crossfadeDuration",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#crossfadeDuration",
    "access": null,
    "description": "Set the crossfade duration when the position changes.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.02",
        "defaultRaw": 0.02,
        "name": "duration",
        "description": "in seconds"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_crossfadeDuration",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_crossfadeDuration",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "crossfadeDuration",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#crossfadeDuration",
    "access": null,
    "description": "Get the crossfade duration when the position changes.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} in seconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "in seconds"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 72,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "hrtfSet",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#hrtfSet",
    "access": null,
    "description": "Refer an external HRTF set.",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "HrtfSet"
        ],
        "spread": false,
        "optional": false,
        "name": "hrtfSet",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_hrtfSet",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_hrtfSet",
    "access": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "hrtfSet",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#hrtfSet",
    "access": null,
    "description": "Get the HrtfSet.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HrtfSet}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HrtfSet"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "position",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#position",
    "access": null,
    "description": "Set the position of the source and updates.",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 76,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_crossfadeAfterTime",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_crossfadeAfterTime",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_convolverCurrent",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_convolverCurrent",
    "access": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_convolverNext",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_convolverNext",
    "access": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_gainCurrent",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_gainCurrent",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_gainNext",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_gainNext",
    "access": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_crossfadeTimeout",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#_crossfadeTimeout",
    "access": null,
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "position",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#position",
    "access": null,
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connectInput",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#connectInput",
    "access": null,
    "description": "Connect the input of a source.",
    "lineNumber": 146,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToConnect",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "output",
        "description": "output to connect from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "input",
        "description": "input to connect to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnectInput",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#disconnectInput",
    "access": null,
    "description": "Disconnect the input of a source.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToDisconnect",
        "description": "disconnect\nall when undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connectOutput",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#connectOutput",
    "access": null,
    "description": "Connect the output of a source.",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToConnect",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "output",
        "description": "output to connect from"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "input",
        "description": "input to connect to"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "disconnectOutput",
    "memberof": "src/audio/Source.js~Source",
    "longname": "src/audio/Source.js~Source#disconnectOutput",
    "access": null,
    "description": "Disconnect the output of a source.",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AudioNode",
          "Array.<AudioNode>"
        ],
        "spread": false,
        "optional": false,
        "name": "nodesToDisconnect",
        "description": "disconnect\nall when undefined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/audio/index.js",
    "memberof": null,
    "longname": "src/audio/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import BinauralPanner from './BinauralPanner';\nimport utilities from './utilities';\nimport Source from './Source';\n\nexport default {\n  BinauralPanner,\n  Source,\n  utilities,\n};\n"
  },
  {
    "__docId__": 88,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/audio/utilities.js",
    "memberof": null,
    "longname": "src/audio/utilities.js",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "content": "/**\n * @fileOverview Audio utilities\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n/**\n * Convert a dB value to a linear amplitude, i.e. -20dB gives 0.1\n *\n * @param {Number} dBValue\n * @returns {Number}\n */\nexport function dBToLin(dBValue) {\n  const factor = 1 / 20;\n  return Math.pow(10, dBValue * factor);\n}\n\n/**\n * Create a Dirac buffer, zero-padded.\n *\n * Warning: the default length is 2 samples,\n * to by-pass a bug in Safari ≤ 9.\n *\n * @param {Object} options\n * @param {AudioContext} options.audioContext must be defined\n * @param {Number} [options.channelCount=1]\n * @param {Number} [options.gain=0] in dB\n * @param {Number} [options.length=2] in samples\n * @returns {AudioBuffer}\n */\nexport function createDiracBuffer(options = {}) {\n  const context = options.audioContext;\n\n  const length = (typeof options.length !== 'undefined'\n                  ? options.length\n                  : 2); // Safari ≤9 needs one more\n  const channelCount = (typeof options.channelCount !== 'undefined'\n                        ? options.channelCount\n                        : 1);\n  const gain = (typeof options.gain !== 'undefined'\n                ? options.gain\n                : 0); // dB\n\n  const buffer = context.createBuffer(channelCount, length,\n                                      context.sampleRate);\n  const data = buffer.getChannelData(0);\n\n  const amplitude = dBToLin(gain);\n  data[0] = amplitude;\n  // already padded with zeroes\n\n  return buffer;\n}\n\n/**\n * Create a noise buffer.\n *\n * @param {Object} options\n * @param {AudioContext} options.audioContext must be defined\n * @param {Number} [options.channelCount=1]\n * @param {Number} [options.duration=5] in seconds\n * @param {Number} [options.gain=-30] in dB\n * @returns {AudioBuffer}\n */\nexport function createNoiseBuffer(options = {}) {\n  const context = options.audioContext;\n  const duration = (typeof options.duration !== 'undefined'\n                    ? options.duration\n                    : 5);\n\n  const gain = (typeof options.gain !== 'undefined'\n                ? options.gain\n                : -30); // dB\n\n  const channelCount = (typeof options.channelCount\n                          ? options.channelCount\n                          : context.destination.channelCount);\n\n  const length = duration * context.sampleRate;\n  const amplitude = dBToLin(gain);\n  const buffer = context.createBuffer(channelCount, length,\n                                    context.sampleRate);\n  for (let c = 0; c < channelCount; ++c) {\n    const data = buffer.getChannelData(c);\n    for (let i = 0; i < length; ++i) {\n      data[i] = amplitude * (Math.random() * 2 - 1);\n    }\n  }\n  return buffer;\n}\n\n/**\n * Convert an array, typed or not, to a Float32Array, with possible re-sampling.\n *\n * @param {Object} options\n * @param {Array} options.inputSamples input array\n * @param {Number} options.inputSampleRate in Hertz\n * @param {Number} [options.outputSampleRate=options.inputSampleRate]\n * @returns {Promise.<Float32Array|Error>}\n */\nexport function resampleFloat32Array(options = {}) {\n  const promise = new Promise( (resolve, reject) => {\n    const inputSamples = options.inputSamples;\n    const inputSampleRate = options.inputSampleRate;\n\n    const outputSampleRate = (typeof options.outputSampleRate !== 'undefined'\n                              ? options.outputSampleRate\n                              : inputSampleRate);\n\n    if (inputSampleRate === outputSampleRate) {\n      resolve(new Float32Array(inputSamples) );\n    } else {\n      try {\n        const outputSamplesNb = Math.ceil(inputSamples.length\n                                          * outputSampleRate / inputSampleRate);\n\n        const context = new window.OfflineAudioContext(1, outputSamplesNb,\n                                                       outputSampleRate);\n\n        const inputBuffer = context.createBuffer(1, inputSamples.length,\n                                                 inputSampleRate);\n\n        inputBuffer.getChannelData(0).set(inputSamples);\n\n        const source = context.createBufferSource();\n        source.buffer = inputBuffer;\n        source.connect(context.destination);\n\n        source.start(); // will start with offline context\n\n        context.oncomplete = (event) => {\n          const outputSamples = event.renderedBuffer.getChannelData(0);\n          resolve(outputSamples);\n        };\n\n        context.startRendering();\n      } catch (error) {\n        reject(new Error(`Unable to re-sample Float32Array. ${error.message}`) );\n      }\n    }\n  });\n\n  return promise;\n}\n\nexport default {\n  dBToLin,\n  createDiracBuffer,\n  createNoiseBuffer,\n  resampleFloat32Array,\n};\n"
  },
  {
    "__docId__": 89,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "dBToLin",
    "memberof": "src/audio/utilities.js",
    "longname": "src/audio/utilities.js~dBToLin",
    "access": null,
    "export": true,
    "importPath": "binaural/src/audio/utilities.js",
    "importStyle": "{dBToLin}",
    "description": "Convert a dB value to a linear amplitude, i.e. -20dB gives 0.1",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dBValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createDiracBuffer",
    "memberof": "src/audio/utilities.js",
    "longname": "src/audio/utilities.js~createDiracBuffer",
    "access": null,
    "export": true,
    "importPath": "binaural/src/audio/utilities.js",
    "importStyle": "{createDiracBuffer}",
    "description": "Create a Dirac buffer, zero-padded.\nWarning: the default length is 2 samples,\nto by-pass a bug in Safari ≤ 9.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AudioBuffer}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "name": "options.audioContext",
        "description": "must be defined"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.channelCount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.gain",
        "description": "in dB"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.length",
        "description": "in samples"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AudioBuffer"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createNoiseBuffer",
    "memberof": "src/audio/utilities.js",
    "longname": "src/audio/utilities.js~createNoiseBuffer",
    "access": null,
    "export": true,
    "importPath": "binaural/src/audio/utilities.js",
    "importStyle": "{createNoiseBuffer}",
    "description": "Create a noise buffer.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AudioBuffer}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "name": "options.audioContext",
        "description": "must be defined"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "options.channelCount",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "5",
        "defaultRaw": 5,
        "name": "options.duration",
        "description": "in seconds"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "-30",
        "defaultRaw": -30,
        "name": "options.gain",
        "description": "in dB"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AudioBuffer"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "resampleFloat32Array",
    "memberof": "src/audio/utilities.js",
    "longname": "src/audio/utilities.js~resampleFloat32Array",
    "access": null,
    "export": true,
    "importPath": "binaural/src/audio/utilities.js",
    "importStyle": "{resampleFloat32Array}",
    "description": "Convert an array, typed or not, to a Float32Array, with possible re-sampling.",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Float32Array|Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "options.inputSamples",
        "description": "input array"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.inputSampleRate",
        "description": "in Hertz"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "options.inputSampleRate",
        "defaultRaw": "options.inputSampleRate",
        "name": "options.outputSampleRate",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Float32Array",
        "Error>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/common/index.js",
    "memberof": null,
    "longname": "src/common/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import utilities from './utilities';\n\nexport default {\n  utilities,\n};\n"
  },
  {
    "__docId__": 94,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/common/utilities.js",
    "memberof": null,
    "longname": "src/common/utilities.js",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "content": "/**\n * @fileOverview Common utilities\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n/**\n * Test whether a value is around a reference, given a tolerance.\n *\n * @param {Number} value\n * @param {Number} reference\n * @param {Number} [tolerance=Number.EPSILON]\n * @returns {Number} Math.abs(value - reference) <= tolerance;\n */\nexport function almostEquals(value, reference, tolerance = Number.EPSILON) {\n  return Math.abs(value - reference) <= tolerance;\n}\n\n/**\n * Test whether a value is around a reference, given a tolerance and a\n * modulo.\n *\n * @param {Number} value\n * @param {Number} reference\n * @param {Number} modulo\n * @param {Number} [tolerance=Number.EPSILON]\n * @returns {Number} Math.abs(value - reference) % modulo <= tolerance;\n */\nexport function almostEqualsModulo(value, reference, modulo,\n                                   tolerance = Number.EPSILON) {\n  return Math.abs(value - reference) % modulo <= tolerance;\n}\n\nexport default {\n  almostEquals,\n  almostEqualsModulo,\n};\n"
  },
  {
    "__docId__": 95,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "almostEquals",
    "memberof": "src/common/utilities.js",
    "longname": "src/common/utilities.js~almostEquals",
    "access": null,
    "export": true,
    "importPath": "binaural/src/common/utilities.js",
    "importStyle": "{almostEquals}",
    "description": "Test whether a value is around a reference, given a tolerance.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Math.abs(value - reference) <= tolerance;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "reference",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Math.abs(value - reference) <= tolerance;"
    },
    "generator": false
  },
  {
    "__docId__": 96,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "almostEqualsModulo",
    "memberof": "src/common/utilities.js",
    "longname": "src/common/utilities.js~almostEqualsModulo",
    "access": null,
    "export": true,
    "importPath": "binaural/src/common/utilities.js",
    "importStyle": "{almostEqualsModulo}",
    "description": "Test whether a value is around a reference, given a tolerance and a\nmodulo.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Math.abs(value - reference) % modulo <= tolerance;"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "reference",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "modulo",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Number.EPSILON",
        "defaultRaw": "Number.EPSILON",
        "name": "tolerance",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Math.abs(value - reference) % modulo <= tolerance;"
    },
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/geometry/KdTree.js",
    "memberof": null,
    "longname": "src/geometry/KdTree.js",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "content": "/**\n * @fileOverview Helpers for k-d tree.\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\nimport tree from 'kd.tree';\nexport { tree };\n\n/**\n * Get the squared distance between to points.\n *\n * (Avoid computing the square-root when unnecessary.)\n *\n * @param {Object} a in cartesian coordinates.\n * @param {Number} a.x\n * @param {Number} a.y\n * @param {Number} a.z\n * @param {Object} b in cartesian coordinates.\n * @param {Number} b.x\n * @param {Number} b.y\n * @param {Number} b.z\n * @returns {Number}\n */\nexport function distanceSquared(a, b) {\n  const x = b.x - a.x;\n  const y = b.y - a.y;\n  const z = b.z - a.z;\n  return x * x + y * y + z * z;\n}\n\n/**\n * Get the distance between to points.\n *\n * @param {Object} a in cartesian coordinates.\n * @param {Number} a.x\n * @param {Number} a.y\n * @param {Number} a.z\n * @param {Object} b in cartesian coordinates.\n * @param {Number} b.x\n * @param {Number} b.y\n * @param {Number} b.z\n * @returns {Number}\n */\nexport function distance(a, b) {\n  return Math.sqrt(this.distanceSquared(a, b) );\n}\n\nexport default {\n  distance,\n  distanceSquared,\n  tree,\n};\n"
  },
  {
    "__docId__": 98,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "distanceSquared",
    "memberof": "src/geometry/KdTree.js",
    "longname": "src/geometry/KdTree.js~distanceSquared",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/KdTree.js",
    "importStyle": "{distanceSquared}",
    "description": "Get the squared distance between to points.\n(Avoid computing the square-root when unnecessary.)",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "in cartesian coordinates."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a.x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a.y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a.z",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "in cartesian coordinates."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b.x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b.y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b.z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "distance",
    "memberof": "src/geometry/KdTree.js",
    "longname": "src/geometry/KdTree.js~distance",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/KdTree.js",
    "importStyle": "{distance}",
    "description": "Get the distance between to points.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "in cartesian coordinates."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a.x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a.y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a.z",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "in cartesian coordinates."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b.x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b.y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b.z",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 100,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/geometry/coordinates.js",
    "memberof": null,
    "longname": "src/geometry/coordinates.js",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "content": "/**\n * @fileOverview SOFA convention to and from openGL convention.\n *\n * SOFA distances are in metres, angles in degrees.\n *\n * <pre>\n *\n * SOFA          +z  +x             openGL    +y\n *                | /                          |\n *                |/                           |\n *         +y ----o                            o---- +x\n *                                            /\n *                                           /\n *                                          +z\n *\n * SOFA.x = -openGL.z               openGL.x = -SOFA.y\n * SOFA.y = -openGL.x               openGL.y =  SOFA.z\n * SOFA.z =  openGL.y               openGL.z = -SOFA.x\n *\n * SOFA.azimuth = atan2(SOFA.y, SOFA.x)\n * SOFA.elevation = atan2(SOFA.z, sqrt(SOFA.x * SOFA.x + SOFA.y * SOFA.y) );\n * SOFA.distance = sqrt(SOFA.x * SOFA.x + SOFA.y * SOFA.y + SOFA.z * SOFA.z)\n *\n * </pre>\n *\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\nimport degree from './degree';\n\n/**\n * Coordinates as an array of 3 values:\n * [x, y, z] or [azimuth, elevation, distance], depending on type\n *\n * @typedef coordinates\n * @type {vec3}\n */\n\n/**\n * Coordinates system type: sofaCartesian', 'sofaSpherical', or'gl'.\n *\n * @typedef coordinatesType\n * @type {String}\n */\n\n/**\n * Convert SOFA cartesian coordinates to openGL.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @returns {coordinates} out\n */\nexport function sofaCartesianToGl(out, a) {\n  // copy to handle in-place\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  out[0] = -y;\n  out[1] = z;\n  out[2] = -x;\n\n  return out;\n}\n\n/**\n * Convert openGL coordinates to SOFA cartesian.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @returns {coordinates} out\n */\nexport function glToSofaCartesian(out, a) {\n  // copy to handle in-place\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  out[0] = -z;\n  out[1] = -x;\n  out[2] = y;\n\n  return out;\n}\n\n/**\n * Convert SOFA cartesian coordinates to SOFA spherical.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @returns {coordinates} out\n */\nexport function sofaCartesianToSofaSpherical(out, a) {\n  // copy to handle in-place\n  const x = a[0];\n  const y = a[1];\n  const z = a[2];\n\n  const x2y2 = x * x + y * y;\n\n  // from [-180, 180] to [0, 360);\n  out[0] = (degree.atan2(y, x) + 360) % 360;\n\n  out[1] = degree.atan2(z, Math.sqrt(x2y2) );\n  out[2] = Math.sqrt(x2y2 + z * z);\n\n  return out;\n}\n\n/**\n * Convert SOFA spherical coordinates to SOFA spherical.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @returns {coordinates} out\n */\nexport function sofaSphericalToSofaCartesian(out, a) {\n  // copy to handle in-place\n  const azimuth = a[0];\n  const elevation = a[1];\n  const distance = a[2];\n\n  const cosE = degree.cos(elevation);\n  out[0] = distance * cosE * degree.cos(azimuth); // SOFA.x\n  out[1] = distance * cosE * degree.sin(azimuth); // SOFA.y\n  out[2] = distance * degree.sin(elevation); // SOFA.z\n\n  return out;\n}\n\n/**\n * Convert SOFA spherical coordinates to openGL.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @returns {coordinates} out\n */\nexport function sofaSphericalToGl(out, a) {\n  // copy to handle in-place\n  const azimuth = a[0];\n  const elevation = a[1];\n  const distance = a[2];\n\n  const cosE = degree.cos(elevation);\n  out[0] = -distance * cosE * degree.sin(azimuth); // -SOFA.y\n  out[1] = distance * degree.sin(elevation); // SOFA.z\n  out[2] = -distance * cosE * degree.cos(azimuth); // -SOFA.x\n\n  return out;\n}\n\n/**\n * Convert openGL coordinates to SOFA spherical.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @returns {coordinates} out\n */\nexport function glToSofaSpherical(out, a) {\n  // copy to handle in-place\n  // difference to avoid generating -0 out of 0\n  const x = 0 - a[2]; // -openGL.z\n  const y = 0 - a[0]; // -openGL.x\n  const z = a[1]; // openGL.y\n\n  const x2y2 = x * x + y * y;\n\n  // from [-180, 180] to [0, 360);\n  out[0] = (degree.atan2(y, x) + 360) % 360;\n\n  out[1] = degree.atan2(z, Math.sqrt(x2y2) );\n  out[2] = Math.sqrt(x2y2 + z * z);\n\n  return out;\n}\n\n/**\n * Convert typed coordinates to SOFA cartesian.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @param {coordinatesType} type\n * @returns {coordinates} out\n * @throws {Error} when the type is unknown.\n */\nexport function typedToSofaCartesian(out, a, type) {\n  switch (type) {\n    case 'sofaCartesian':\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      break;\n\n    case 'sofaSpherical':\n      sofaSphericalToSofaCartesian(out, a);\n      break;\n\n    default:\n      throw new Error('Bad SOFA type');\n  }\n  return out;\n}\n\n/**\n * Convert typed coordinates to openGL.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @param {coordinatesType} type\n * @returns {coordinates} out\n * @throws {Error} when the type is unknown.\n */\nexport function typedToGl(out, a, type) {\n  switch (type) {\n    case 'gl':\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      break;\n\n    case 'sofaCartesian':\n      sofaCartesianToGl(out, a);\n      break;\n\n    case 'sofaSpherical':\n      sofaSphericalToGl(out, a);\n      break;\n\n    default:\n      throw new Error('Bad SOFA type');\n  }\n  return out;\n}\n\n/**\n * Convert openGL coordinates to typed ones.\n *\n * @param {coordinates} out in-place if out === a.\n * @param {coordinates} a\n * @param {coordinatesType} type\n * @returns {coordinates} out\n * @throws {Error} when the type is unknown.\n */\nexport function glToTyped(out, a, type) {\n  switch (type) {\n    case 'gl':\n      out[0] = a[0];\n      out[1] = a[1];\n      out[2] = a[2];\n      break;\n\n    case 'sofaCartesian':\n      glToSofaCartesian(out, a);\n      break;\n\n    case 'sofaSpherical':\n      glToSofaSpherical(out, a);\n      break;\n\n    default:\n      throw new Error('Bad SOFA type');\n  }\n  return out;\n}\n\nexport default {\n  sofaCartesianToGl,\n  sofaCartesianToSofaSpherical,\n  glToSofaCartesian,\n  glToSofaSpherical,\n  glToTyped,\n  sofaSphericalToSofaCartesian,\n  sofaSphericalToGl,\n  typedToSofaCartesian,\n  typedToGl,\n};\n"
  },
  {
    "__docId__": 101,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "coordinates",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~coordinates",
    "access": null,
    "description": "Coordinates as an array of 3 values:\n[x, y, z] or [azimuth, elevation, distance], depending on type",
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "coordinates"
    }
  },
  {
    "__docId__": 102,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "coordinatesType",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~coordinatesType",
    "access": null,
    "description": "Coordinates system type: sofaCartesian', 'sofaSpherical', or'gl'.",
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "coordinatesType"
    }
  },
  {
    "__docId__": 103,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sofaCartesianToGl",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~sofaCartesianToGl",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{sofaCartesianToGl}",
    "description": "Convert SOFA cartesian coordinates to openGL.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "glToSofaCartesian",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~glToSofaCartesian",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{glToSofaCartesian}",
    "description": "Convert openGL coordinates to SOFA cartesian.",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "generator": false
  },
  {
    "__docId__": 105,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sofaCartesianToSofaSpherical",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~sofaCartesianToSofaSpherical",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{sofaCartesianToSofaSpherical}",
    "description": "Convert SOFA cartesian coordinates to SOFA spherical.",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "generator": false
  },
  {
    "__docId__": 106,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sofaSphericalToSofaCartesian",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~sofaSphericalToSofaCartesian",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{sofaSphericalToSofaCartesian}",
    "description": "Convert SOFA spherical coordinates to SOFA spherical.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sofaSphericalToGl",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~sofaSphericalToGl",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{sofaSphericalToGl}",
    "description": "Convert SOFA spherical coordinates to openGL.",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "glToSofaSpherical",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~glToSofaSpherical",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{glToSofaSpherical}",
    "description": "Convert openGL coordinates to SOFA spherical.",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "typedToSofaCartesian",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~typedToSofaCartesian",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{typedToSofaCartesian}",
    "description": "Convert typed coordinates to SOFA cartesian.",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when the type is unknown."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "typedToGl",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~typedToGl",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{typedToGl}",
    "description": "Convert typed coordinates to openGL.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when the type is unknown."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "glToTyped",
    "memberof": "src/geometry/coordinates.js",
    "longname": "src/geometry/coordinates.js~glToTyped",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/coordinates.js",
    "importStyle": "{glToTyped}",
    "description": "Convert openGL coordinates to typed ones.",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinates} out"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "out",
        "description": "in-place if out === a."
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinates"
      ],
      "spread": false,
      "description": "out"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when the type is unknown."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/geometry/degree.js",
    "memberof": null,
    "longname": "src/geometry/degree.js",
    "access": null,
    "description": null,
    "lineNumber": 11,
    "content": "/**\n * @fileOverview Convert to and from degree\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n/**\n * Degree to radian multiplication factor.\n */\nexport const toRadianFactor = Math.PI / 180;\n\n/**\n * Radian to degree multiplication factor.\n */\nexport const fromRadianFactor = 1 / toRadianFactor;\n\n/**\n * Convert an angle in degrees to radians.\n *\n * @param {Number} angle in degrees\n * @returns {Number} angle in radians\n */\nexport function toRadian(angle) {\n  return angle * toRadianFactor;\n}\n\n/**\n * Convert an angle in radians to degrees.\n *\n * @param {Number} angle in radians\n * @returns {Number} angle in degrees\n */\nexport function fromRadian(angle) {\n  return angle * fromRadianFactor;\n}\n\n/**\n * Get the cosinus of an angle in degrees.\n *\n * @param {Number} angle\n * @returns {Number}\n */\nexport function cos(angle) {\n  return Math.cos(angle * toRadianFactor);\n}\n\n/**\n * Get the sinus of an angle in degrees.\n *\n * @param {Number} angle\n * @returns {Number}\n */\nexport function sin(angle) {\n  return Math.sin(angle * toRadianFactor );\n}\n\n/**\n * Get the arc-tangent (2 arguments) of 2 angles in degrees.\n *\n * @param {Number} y\n * @param {Number} x\n * @returns {Number}\n */\nexport function atan2(y, x) {\n  return Math.atan2(y, x) * fromRadianFactor;\n}\n\nexport default {\n  atan2,\n  cos,\n  fromRadian,\n  fromRadianFactor,\n  sin,\n  toRadian,\n  toRadianFactor,\n};\n"
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "toRadianFactor",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~toRadianFactor",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{toRadianFactor}",
    "description": "Degree to radian multiplication factor.",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "fromRadianFactor",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~fromRadianFactor",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{fromRadianFactor}",
    "description": "Radian to degree multiplication factor.",
    "lineNumber": 16,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "toRadian",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~toRadian",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{toRadian}",
    "description": "Convert an angle in degrees to radians.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} angle in radians"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "in degrees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "angle in radians"
    },
    "generator": false
  },
  {
    "__docId__": 116,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fromRadian",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~fromRadian",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{fromRadian}",
    "description": "Convert an angle in radians to degrees.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} angle in degrees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "in radians"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "angle in degrees"
    },
    "generator": false
  },
  {
    "__docId__": 117,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "cos",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~cos",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{cos}",
    "description": "Get the cosinus of an angle in degrees.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sin",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~sin",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{sin}",
    "description": "Get the sinus of an angle in degrees.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "atan2",
    "memberof": "src/geometry/degree.js",
    "longname": "src/geometry/degree.js~atan2",
    "access": null,
    "export": true,
    "importPath": "binaural/src/geometry/degree.js",
    "importStyle": "{atan2}",
    "description": "Get the arc-tangent (2 arguments) of 2 angles in degrees.",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/geometry/index.js",
    "memberof": null,
    "longname": "src/geometry/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import coordinates from './coordinates';\nimport degree from './degree';\nimport KdTree from './KdTree';\n\nexport default {\n  coordinates,\n  degree,\n  KdTree,\n};\n"
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import audio from './audio';\nexport { audio };\nimport common from './common';\nexport { common };\nimport geometry from './geometry';\nexport { geometry };\nimport sofa from './sofa';\nexport { sofa };\n\nexport default {\n  audio,\n  common,\n  geometry,\n  sofa,\n};\n"
  },
  {
    "__docId__": 122,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sofa/HrtfSet.js",
    "memberof": null,
    "longname": "src/sofa/HrtfSet.js",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "content": "/**\n * @fileOverview Container for HRTF set: load a set from an URL and get\n * filters from corresponding positions.\n *\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\nimport glMatrix from 'gl-matrix';\n\nimport { parseDataSet } from './parseDataSet';\nimport { parseSofa } from './parseSofa';\nimport { conformSofaType } from './parseSofa';\nimport coordinates from '../geometry/coordinates';\nimport kdTree from '../geometry/KdTree';\nimport { resampleFloat32Array } from '../audio/utilities';\n\n/**\n * Container for HRTF set.\n */\nexport class HrtfSet {\n\n  /**\n   * Constructs an HRTF set. Note that the filter positions are applied\n   * during the load of an URL.\n   *\n   * See {@link HrtfSet#load}.\n   *\n   * @param {Object} options\n   * @param {AudioContext} options.audioContext mandatory for the creation\n   * of FIR audio buffers\n   * @param {coordinatesType} [options.positionsType='gl']\n   * {@link HrtfSet#positionsType}\n   * @param {coordinatesType} [options.filterPositionsType=options.positionsType]\n   * {@link HrtfSet#filterPositionsType}\n   * @param {Array.<coordinates>} [options.filterPositions=undefined]\n   * {@link HrtfSet#filterPositions}\n   * array of positions to filter. Use undefined to use all positions.\n   * @param {Boolean} [options.filterAfterLoad=false] true to filter after\n   * full load of SOFA file\n   * {@link HrtfSet#filterAfterLoad}\n   */\n  constructor(options = {}) {\n    this._audioContext = options.audioContext;\n\n    this._ready = false;\n\n    this.positionsType = options.positionsType;\n\n    this.filterPositionsType = options.filterPositionsType;\n    this.filterPositions = options.filterPositions;\n\n    this.filterAfterLoad = options.filterAfterLoad;\n  }\n\n  // ------------ accessors\n\n  /**\n   * Set coordinates type for positions.\n   * @param {coordinatesType} [type='gl']\n   */\n  set positionsType(type) {\n    this._positionsType = (typeof type !== 'undefined'\n                           ? type\n                           : 'gl');\n  }\n\n  /**\n   * Get coordinates type for positions.\n   *\n   * @returns {coordinatesType}\n   */\n  get positionsType() {\n    return this._positionsType;\n  }\n\n  /**\n   * Set coordinates type for filter positions.\n   *\n   * @param {coordinatesType} [type] undefined to use positionsType\n   */\n  set filterPositionsType(type) {\n    this._filterPositionsType = (typeof type !== 'undefined'\n                                 ? type\n                                 : this.positionsType);\n  }\n\n  /**\n   * Get coordinates type for filter positions.\n   *\n   * @param {coordinatesType} type\n   */\n  get filterPositionsType() {\n    return this._filterPositionsType;\n  }\n\n  /**\n   * Set filter positions.\n   *\n   * @param {Array.<coordinates>} [positions] undefined for no filtering.\n   */\n  set filterPositions(positions) {\n    if (typeof positions === 'undefined') {\n      this._filterPositions = undefined;\n    } else {\n      switch (this.filterPositionsType) {\n        case 'gl':\n          this._filterPositions = positions.map( (current) => {\n            return current.slice(0); // copy\n          });\n          break;\n\n        case 'sofaCartesian':\n          this._filterPositions = positions.map( (current) => {\n            return coordinates.sofaCartesianToGl([], current);\n          });\n          break;\n\n        case 'sofaSpherical':\n          this._filterPositions = positions.map( (current) => {\n            return coordinates.sofaSphericalToGl([], current);\n          });\n          break;\n\n        default:\n          throw new Error('Bad filter type');\n      }\n    }\n  }\n\n  /**\n   * Get filter positions.\n   *\n   * @param {Array.<coordinates>} positions\n   */\n  get filterPositions() {\n    let positions;\n    if (typeof this._filterPositions !== 'undefined') {\n      switch (this.filterPositionsType) {\n        case 'gl':\n          positions = this._filterPositions.map( (current) => {\n            return current.slice(0); // copy\n          });\n          break;\n\n        case 'sofaCartesian':\n          positions = this._filterPositions.map( (current) => {\n            return coordinates.glToSofaCartesian([], current);\n          });\n          break;\n\n        case 'sofaSpherical':\n          positions = this._filterPositions.map( (current) => {\n            return coordinates.glToSofaSpherical([], current);\n          });\n          break;\n\n        default:\n          throw new Error('Bad filter type');\n      }\n    }\n    return positions;\n  }\n\n  /**\n   * Set post-filtering flag. When false, try to load a partial set of\n   * HRTF.\n   *\n   * @param {Boolean} [post=false]\n   */\n  set filterAfterLoad(post) {\n    this._filterAfterLoad = (typeof post !== 'undefined'\n                        ? post\n                        : false);\n  }\n\n  /**\n   * Get post-filtering flag. When false, try to load a partial set of\n   * HRTF.\n   *\n   * @returns {Boolean}\n   */\n  get filterAfterLoad() {\n    return this._filterAfterLoad;\n  }\n\n  /**\n   * Test whether an HRTF set is actually loaded.\n   *\n   * See {@link HrtfSet#load}.\n   *\n   * @returns {Boolean} false before any successful load, true after.\n   *\n   */\n  get isReady() {\n    return this._ready;\n  }\n\n  /**\n   * Get the URL used to actually load the HRTF set.\n   *\n   * @returns {String} that is undefined before a successfully load.\n   */\n  get sofaUrl() {\n    return this._sofaUrl;\n  }\n\n  /**\n   * Get the original sample-rate from the SOFA URL already loaded.\n   *\n   * @returns {Number} that is undefined before a successfully load.\n   */\n  get sofaSampleRate() {\n    return this._sofaSampleRate;\n  }\n\n  /**\n   * Get the meta-data from the SOFA URL already loaded.\n   *\n   * @returns {Object} that is undefined before a successfully load.\n   */\n  get sofaMetaData() {\n    return this._sofaMetaData;\n  }\n\n  // ------------- public methods\n\n  /**\n   * Apply filter positions to an existing set of HRTF. (After a successful\n   * load.)\n   *\n   * This is destructive.\n   *\n   * See {@link HrtfSet#load}.\n   */\n  applyFilterPositions() {\n    // do not use getter for gl positions\n    let filteredPositions = this._filterPositions.map( (current) => {\n      return this._kdt.nearest({ x: current[0], y: current[1], z: current[2] },\n                              1)\n        .pop()[0]; // nearest data\n    });\n\n    // filter out duplicates\n    filteredPositions = [ ...new Set(filteredPositions) ];\n\n    this._kdt = kdTree.tree.createKdTree(filteredPositions,\n                                        kdTree.distanceSquared,\n                                        ['x', 'y', 'z']);\n  }\n\n  /**\n   * Load an URL and generate the corresponding set of IR buffers.\n   *\n   * @param {String} sourceUrl\n   * @returns {Promise.<this|Error>} resolve when the URL sucessfully\n   * loaded.\n   */\n  load(sourceUrl) {\n    const extension = sourceUrl.split('.').pop();\n\n    const url = (extension === 'sofa'\n                 ? `${sourceUrl}.json`\n                 : sourceUrl);\n\n    let promise;\n\n    // need a server for partial downloading (\"sofa\" extension may be naive)\n    const preFilter = typeof this._filterPositions !== 'undefined'\n            && !this.filterAfterLoad\n            && extension === 'sofa';\n    if (preFilter) {\n      promise = Promise.all([\n        this._loadMetaAndPositions(sourceUrl),\n        this._loadDataSet(sourceUrl),\n      ])\n        .then( (indicesAndDataSet) => {\n          const indices = indicesAndDataSet[0];\n          const dataSet = indicesAndDataSet[1];\n          return this._loadSofaPartial(sourceUrl, indices, dataSet)\n            .then( () => {\n              this._ready = true;\n              return this; // final resolve\n            });\n        })\n        .catch( () => {\n          // when pre-fitering fails, for any reason, try to post-filter\n          // console.log(`Error while partial loading of ${sourceUrl}. `\n          //             + `${error.message}. `\n          //             + `Load full and post-filtering, instead.`);\n          return this._loadSofaFull(url)\n            .then( () => {\n              this.applyFilterPositions();\n              this._ready = true;\n              return this; // final resolve\n            });\n        });\n    } else {\n      promise = this._loadSofaFull(url)\n        .then( () => {\n          if (typeof this._filterPositions !== 'undefined'\n              && this.filterAfterLoad) {\n            this.applyFilterPositions();\n          }\n          this._ready = true;\n          return this; // final resolve\n        });\n    }\n\n    return promise;\n  }\n\n  /**\n   * @typedef HrtfSet.nearestType\n   * @type {Object}\n   * @property {Number} distance from the request\n   * @property {AudioBuffer} fir 2-channels impulse response\n   * @property {Number} index original index in the SOFA set\n   * @property {coordinates} position using positionsType coordinates\n   * system.\n   */\n\n  /**\n   * Get the nearest point in the HRTF set, after a successful load.\n   *\n   * See {@link HrtfSet#load}.\n   *\n   * @param {coordinates} positionRequest\n   * @returns {HrtfSet.nearestType}\n   */\n  nearest(positionRequest) {\n    const position = coordinates.typedToGl([], positionRequest, this.positionsType);\n    const nearest = this._kdt.nearest({\n      x: position[0],\n      y: position[1],\n      z: position[2],\n    }, 1).pop(); // nearest only\n    const data = nearest[0];\n    coordinates.glToTyped(position, [data.x, data.y, data.z], this.positionsType);\n    return {\n      distance: nearest[1],\n      fir: data.fir,\n      index: data.index,\n      position,\n    };\n  }\n\n  /**\n   * Get the FIR AudioBuffer that corresponds to the closest position in\n   * the set.\n   * @param {coordinates} positionRequest\n   * @returns {AudioBuffer}\n   */\n  nearestFir(positionRequest) {\n    return this.nearest(positionRequest).fir;\n  }\n\n  // ----------- private methods\n\n  /**\n   * Creates a kd-tree out of the specified indices, positions, and FIR.\n   *\n   * @private\n   *\n   * @param {Array}\n   * indicesPositionsFirs\n   * @returns {this}\n   */\n  _createKdTree(indicesPositionsFirs) {\n    const positions = indicesPositionsFirs.map( (value) => {\n      const impulseResponses = value[2];\n      const fir = this._audioContext.createBuffer(\n        impulseResponses.length,\n        impulseResponses[0].length,\n        this._audioContext.sampleRate);\n      impulseResponses.forEach( (samples, channel) => {\n        // do not use copyToChannel because of Safari <= 9\n        fir.getChannelData(channel).set(samples);\n      });\n\n      return {\n        index: value[0],\n        x: value[1][0],\n        y: value[1][1],\n        z: value[1][2],\n        fir,\n      };\n    });\n\n    this._kdt = kdTree.tree.createKdTree(positions,\n                                        kdTree.distanceSquared,\n                                        ['x', 'y', 'z']);\n    return this;\n  }\n\n  /**\n   * Asynchronously create Float32Arrays, with possible re-sampling.\n   *\n   * @private\n   *\n   * @param {Array.<Number>} indices\n   * @param {Array.<coordinates>} positions\n   * @param {Array.<Float32Array>} firs\n   * @returns {Promise.<Array|Error>}\n   * @throws {Error} assertion that the channel count is 2\n   */\n  _generateIndicesPositionsFirs(indices, positions, firs) {\n    const sofaFirsPromises = firs.map( (sofaFirChannels, index) => {\n      const channelCount = sofaFirChannels.length;\n      if (channelCount !== 2) {\n        throw new Error(`Bad number of channels`\n                        + ` for IR index ${indices[index]}`\n                        + ` (${channelCount} instead of 2)`);\n      }\n\n      const sofaFirsChannelsPromises = sofaFirChannels.map( (fir) => {\n        return resampleFloat32Array({\n          inputSamples: fir,\n          inputSampleRate: this._sofaSampleRate,\n          outputSampleRate: this._audioContext.sampleRate,\n        });\n      });\n      return Promise.all(sofaFirsChannelsPromises)\n        .then( (firChannels) => {\n          return [\n            indices[index],\n            positions[index],\n            firChannels,\n          ];\n        })\n        .catch( (error) => {\n          // re-throw\n          throw new Error(\n            `Unable to re-sample impulse response ${index}. ${error.message}`);\n        });\n    });\n    return Promise.all(sofaFirsPromises);\n  }\n\n  /**\n   * Try to load a data set from a SOFA URL.\n   *\n   * @private\n   *\n   * @param {String} sourceUrl\n   * @returns {Promise.<Object|Error>}\n   */\n  _loadDataSet(sourceUrl) {\n    const promise = new Promise( (resolve, reject) => {\n      const ddsUrl = `${sourceUrl}.dds`;\n      const request = new window.XMLHttpRequest();\n      request.open('GET', ddsUrl);\n      request.onerror = () => {\n        reject(new Error(`Unable to GET ${ddsUrl}, status ${request.status} `\n                         + `${request.responseText}`) );\n      };\n\n      request.onload = () => {\n        if (request.status < 200 || request.status >= 300) {\n          request.onerror();\n          return;\n        }\n\n        try {\n          const dds = parseDataSet(request.response);\n          resolve(dds);\n        } catch (error) {\n          // re-throw\n          reject(new Error(`Unable to parse ${ddsUrl}. ${error.message}`) );\n        }\n      }; // request.onload\n\n      request.send();\n    });\n\n    return promise;\n  }\n\n  /**\n   * Try to load meta-data and positions from a SOFA URL, to get the\n   * indices closest to the filter positions.\n   *\n   * @private\n   *\n   * @param {String} sourceUrl\n   * @returns {Promise.<Array.<Number>|Error>}\n   */\n  _loadMetaAndPositions(sourceUrl) {\n    const promise = new Promise( (resolve, reject) => {\n      const positionsUrl = `${sourceUrl}.json?`\n              + `ListenerPosition,ListenerUp,ListenerView,SourcePosition,`\n              + `Data.Delay,Data.SamplingRate,`\n              + `EmitterPosition,ReceiverPosition,RoomVolume`; // meta\n\n      const request = new window.XMLHttpRequest();\n      request.open('GET', positionsUrl);\n      request.onerror = () => {\n        reject(new Error(`Unable to GET ${positionsUrl}, status ${request.status} `\n                         + `${request.responseText}`) );\n      };\n\n      request.onload = () => {\n        if (request.status < 200 || request.status >= 300) {\n          request.onerror();\n          return;\n        }\n\n        try {\n          const data = parseSofa(request.response);\n          this._setMetaData(data);\n\n          const sourcePositions = this._sourcePositionsToGl(data);\n          const hrtfPositions = sourcePositions.map( (position, index) => {\n            return {\n              x: position[0],\n              y: position[1],\n              z: position[2],\n              index,\n            };\n          });\n\n          const kdt = kdTree.tree.createKdTree(\n            hrtfPositions,\n            kdTree.distanceSquared,\n            ['x', 'y', 'z']);\n\n          let nearestIndices = this._filterPositions.map( (current) => {\n            return kdt.nearest({ x: current[0], y: current[1], z: current[2] },\n                               1)\n              .pop()[0] // nearest data\n              .index;\n          });\n\n          // filter out duplicates\n          nearestIndices = [ ...new Set(nearestIndices) ];\n\n          this._sofaUrl = sourceUrl;\n          resolve(nearestIndices);\n        } catch (error) {\n          // re-throw\n          reject(new Error(`Unable to parse ${positionsUrl}. ${error.message}`) );\n        }\n      }; // request.onload\n\n      request.send();\n    });\n\n    return promise;\n  }\n\n  /**\n   * Try to load full SOFA URL.\n   *\n   * @private\n   *\n   * @param {String} url\n   * @returns {Promise.<this|Error>}\n   */\n  _loadSofaFull(url) {\n    const promise = new Promise( (resolve, reject) => {\n      const request = new window.XMLHttpRequest();\n      request.open('GET', url);\n      request.onerror = () => {\n        reject(new Error(`Unable to GET ${url}, status ${request.status} `\n                         + `${request.responseText}`) );\n      };\n\n      request.onload = () => {\n        if (request.status < 200 || request.status >= 300) {\n          request.onerror();\n          return;\n        }\n\n        try {\n          const data = parseSofa(request.response);\n          this._setMetaData(data);\n          const sourcePositions = this._sourcePositionsToGl(data);\n          this._generateIndicesPositionsFirs(\n            sourcePositions.map( (position, index) => index), // full\n            sourcePositions,\n            data['Data.IR'].data\n          )\n            .then( (indicesPositionsFirs) => {\n              this._createKdTree(indicesPositionsFirs);\n              this._sofaUrl = url;\n              resolve(this);\n            });\n\n        } catch (error) {\n          // re-throw\n          reject(new Error(`Unable to parse ${url}. ${error.message}`) );\n        }\n      }; // request.onload\n\n      request.send();\n    });\n\n    return promise;\n  }\n\n  /**\n   * Try to load partial data from a SOFA URL.\n   *\n   * @private\n   *\n   * @param {Array.<String>} sourceUrl\n   * @param {Array.<Number>} indices\n   * @param {Object} dataSet\n   * @returns {Promise.<this|Error>}\n   */\n  _loadSofaPartial(sourceUrl, indices, dataSet) {\n    const urlPromises = indices.map( (index) => {\n      const urlPromise = new Promise( (resolve, reject) => {\n        const positionUrl = `${sourceUrl}.json?`\n                + `SourcePosition[${index}][0:1:${dataSet.SourcePosition.C - 1}],`\n                + `Data.IR[${index}][0:1:${dataSet['Data.IR'].R - 1}]`\n                + `[0:1:${dataSet['Data.IR'].N - 1}]`;\n\n        const request = new window.XMLHttpRequest();\n        request.open('GET', positionUrl);\n        request.onerror = () => {\n          reject(new Error(`Unable to GET ${positionUrl}, status ${request.status} `\n                           + `${request.responseText}`) );\n        };\n\n        request.onload = () => {\n          if (request.status < 200 || request.status >= 300) {\n            request.onerror();\n          }\n\n          try {\n            const data = parseSofa(request.response);\n            // (meta-data is already loaded)\n\n            const sourcePositions = this._sourcePositionsToGl(data);\n            this._generateIndicesPositionsFirs([index],\n                                               sourcePositions,\n                                               data['Data.IR'].data)\n              .then( (indicesPositionsFirs) => {\n                // One position per URL here\n                // Array made of multiple promises, later\n                resolve(indicesPositionsFirs[0]);\n              });\n          } catch (error) {\n            // re-throw\n            reject(new Error(\n              `Unable to parse ${positionUrl}. ${error.message}`) );\n          }\n        }; // request.onload\n\n        request.send();\n      });\n\n      return urlPromise;\n    });\n\n    return Promise.all(urlPromises)\n      .then( (indicesPositionsFirs) => {\n        this._createKdTree(indicesPositionsFirs);\n        return this; // final resolve\n      });\n  }\n\n  /**\n   * Set meta-data.\n   *\n   * @private\n   *\n   * @param {Object} data\n   * @throws {Error} assertion for FIR data.\n   */\n  _setMetaData(data) {\n    if (data.metaData.DataType !== 'FIR') {\n      throw new Error('SOFA data type is not FIR');\n    }\n\n    this._sofaMetaData = data.metaData;\n    this._sofaSampleRate = data['Data.SamplingRate'].data[0];\n\n    // Convert listener position, up, and view to SOFA cartesian,\n    // to generate a SOFA-to-GL look-at mat4.\n    // Default SOFA type is 'cartesian' (see table D.4A).\n\n    const listenerPosition = coordinates.typedToSofaCartesian(\n      [], data.ListenerPosition.data[0],\n      conformSofaType(data.ListenerPosition.Type || 'cartesian') );\n\n    const listenerView = coordinates.typedToSofaCartesian(\n      [], data.ListenerView.data[0],\n      conformSofaType(data.ListenerView.Type || 'cartesian') );\n\n    const listenerUp = coordinates.typedToSofaCartesian(\n      [], data.ListenerUp.data[0],\n      conformSofaType(data.ListenerUp.Type || 'cartesian') );\n\n    this._sofaToGl = glMatrix.mat4.lookAt(\n      [], listenerPosition, listenerView, listenerUp);\n  }\n\n  /**\n   * Convert to GL coordinates, in-place.\n   *\n   * @private\n   *\n   * @param {Object} data\n   * @returns {Array.<coordinates>}\n   * @throws {Error}\n   */\n  _sourcePositionsToGl(data) {\n    const sourcePositions = data.SourcePosition.data; // reference\n    const sourcePositionsType = (typeof data.SourcePosition.Type !== 'undefined'\n                                 ? data.SourcePosition.Type\n                                 : 'spherical'); // default (SOFA Table D.4C)\n    switch (sourcePositionsType) {\n      case 'cartesian':\n        sourcePositions.forEach( (position) => {\n          glMatrix.vec3.transformMat4(position, position,\n                                      this._sofaToGl);\n        });\n        break;\n\n      case 'spherical':\n        sourcePositions.forEach( (position) => {\n          coordinates.sofaSphericalToSofaCartesian(position, position); // in-place\n          glMatrix.vec3.transformMat4(position, position,\n                                      this._sofaToGl);\n        });\n        break;\n\n      default:\n        throw new Error('Bad source position type');\n    }\n\n    return sourcePositions;\n  }\n\n}\n\nexport default HrtfSet;\n"
  },
  {
    "__docId__": 123,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HrtfSet",
    "memberof": "src/sofa/HrtfSet.js",
    "longname": "src/sofa/HrtfSet.js~HrtfSet",
    "access": null,
    "export": true,
    "importPath": "binaural/src/sofa/HrtfSet.js",
    "importStyle": "{HrtfSet}",
    "description": "Container for HRTF set.",
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#constructor",
    "access": null,
    "description": "Constructs an HRTF set. Note that the filter positions are applied\nduring the load of an URL.\nSee {@link HrtfSet#load}.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "AudioContext"
        ],
        "spread": false,
        "optional": false,
        "name": "options.audioContext",
        "description": "mandatory for the creation\nof FIR audio buffers"
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gl'",
        "defaultRaw": "'gl'",
        "name": "options.positionsType",
        "description": "{@link HrtfSet#positionsType}"
      },
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "options.positionsType",
        "defaultRaw": "options.positionsType",
        "name": "options.filterPositionsType",
        "description": "{@link HrtfSet#filterPositionsType}"
      },
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "options.filterPositions",
        "description": "{@link HrtfSet#filterPositions}\narray of positions to filter. Use undefined to use all positions."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.filterAfterLoad",
        "description": "true to filter after\nfull load of SOFA file\n{@link HrtfSet#filterAfterLoad}"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_audioContext",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_audioContext",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ready",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_ready",
    "access": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "positionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#positionsType",
    "access": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "filterPositionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterPositionsType",
    "access": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterPositions",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "filterAfterLoad",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterAfterLoad",
    "access": null,
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "positionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#positionsType",
    "access": null,
    "description": "Set coordinates type for positions.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'gl'",
        "defaultRaw": "'gl'",
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_positionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_positionsType",
    "access": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "positionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#positionsType",
    "access": null,
    "description": "Get coordinates type for positions.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{coordinatesType}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "coordinatesType"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "filterPositionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterPositionsType",
    "access": null,
    "description": "Set coordinates type for filter positions.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": true,
        "name": "type",
        "description": "undefined to use positionsType"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterPositionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_filterPositionsType",
    "access": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filterPositionsType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterPositionsType",
    "access": null,
    "description": "Get coordinates type for filter positions.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinatesType"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 137,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterPositions",
    "access": null,
    "description": "Set filter positions.",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": true,
        "name": "positions",
        "description": "undefined for no filtering."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_filterPositions",
    "access": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_filterPositions",
    "access": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_filterPositions",
    "access": null,
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_filterPositions",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterPositions",
    "access": null,
    "description": "Get filter positions.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "filterAfterLoad",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterAfterLoad",
    "access": null,
    "description": "Set post-filtering flag. When false, try to load a partial set of\nHRTF.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "post",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_filterAfterLoad",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_filterAfterLoad",
    "access": null,
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "filterAfterLoad",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#filterAfterLoad",
    "access": null,
    "description": "Get post-filtering flag. When false, try to load a partial set of\nHRTF.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "isReady",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#isReady",
    "access": null,
    "description": "Test whether an HRTF set is actually loaded.\nSee {@link HrtfSet#load}.",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} false before any successful load, true after."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "false before any successful load, true after."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 147,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "sofaUrl",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#sofaUrl",
    "access": null,
    "description": "Get the URL used to actually load the HRTF set.",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} that is undefined before a successfully load."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "that is undefined before a successfully load."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "sofaSampleRate",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#sofaSampleRate",
    "access": null,
    "description": "Get the original sample-rate from the SOFA URL already loaded.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} that is undefined before a successfully load."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "that is undefined before a successfully load."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 149,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "sofaMetaData",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#sofaMetaData",
    "access": null,
    "description": "Get the meta-data from the SOFA URL already loaded.",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} that is undefined before a successfully load."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "that is undefined before a successfully load."
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 150,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "applyFilterPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#applyFilterPositions",
    "access": null,
    "description": "Apply filter positions to an existing set of HRTF. (After a successful\nload.)\nThis is destructive.\nSee {@link HrtfSet#load}.",
    "lineNumber": 237,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_kdt",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_kdt",
    "access": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "load",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#load",
    "access": null,
    "description": "Load an URL and generate the corresponding set of IR buffers.",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<this|Error>} resolve when the URL sucessfully\nloaded."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<this",
        "Error>"
      ],
      "spread": false,
      "description": "resolve when the URL sucessfully\nloaded."
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ready",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_ready",
    "access": null,
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ready",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_ready",
    "access": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_ready",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_ready",
    "access": null,
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "typedef",
    "static": true,
    "variation": null,
    "name": "HrtfSet.nearestType",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet.HrtfSet.nearestType",
    "access": null,
    "description": null,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "from the request"
      },
      {
        "nullable": null,
        "types": [
          "AudioBuffer"
        ],
        "spread": false,
        "optional": false,
        "name": "fir",
        "description": "2-channels impulse response"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "original index in the SOFA set"
      },
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "using positionsType coordinates\nsystem."
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "HrtfSet.nearestType"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nearest",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#nearest",
    "access": null,
    "description": "Get the nearest point in the HRTF set, after a successful load.\nSee {@link HrtfSet#load}.",
    "lineNumber": 332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{HrtfSet.nearestType}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "HrtfSet.nearestType"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "nearestFir",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#nearestFir",
    "access": null,
    "description": "Get the FIR AudioBuffer that corresponds to the closest position in\nthe set.",
    "lineNumber": 355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AudioBuffer}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "coordinates"
        ],
        "spread": false,
        "optional": false,
        "name": "positionRequest",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AudioBuffer"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createKdTree",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_createKdTree",
    "access": "private",
    "description": "Creates a kd-tree out of the specified indices, positions, and FIR.",
    "lineNumber": 370,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "indicesPositionsFirs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_kdt",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_kdt",
    "access": null,
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_generateIndicesPositionsFirs",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_generateIndicesPositionsFirs",
    "access": "private",
    "description": "Asynchronously create Float32Arrays, with possible re-sampling.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array|Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<coordinates>"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<Float32Array>"
        ],
        "spread": false,
        "optional": false,
        "name": "firs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array",
        "Error>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "assertion that the channel count is 2"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadDataSet",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_loadDataSet",
    "access": "private",
    "description": "Try to load a data set from a SOFA URL.",
    "lineNumber": 449,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Object|Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Object",
        "Error>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadMetaAndPositions",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_loadMetaAndPositions",
    "access": "private",
    "description": "Try to load meta-data and positions from a SOFA URL, to get the\nindices closest to the filter positions.",
    "lineNumber": 489,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array.<Number>|Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array.<Number>",
        "Error>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sofaUrl",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_sofaUrl",
    "access": null,
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadSofaFull",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_loadSofaFull",
    "access": "private",
    "description": "Try to load full SOFA URL.",
    "lineNumber": 560,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<this|Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<this",
        "Error>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 166,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sofaUrl",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_sofaUrl",
    "access": null,
    "description": null,
    "lineNumber": 586,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadSofaPartial",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_loadSofaPartial",
    "access": "private",
    "description": "Try to load partial data from a SOFA URL.",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<this|Error>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<Number>"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSet",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<this",
        "Error>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_setMetaData",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_setMetaData",
    "access": "private",
    "description": "Set meta-data.",
    "lineNumber": 673,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "assertion for FIR data."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 169,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sofaMetaData",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_sofaMetaData",
    "access": null,
    "description": null,
    "lineNumber": 678,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sofaSampleRate",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_sofaSampleRate",
    "access": null,
    "description": null,
    "lineNumber": 679,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_sofaToGl",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_sofaToGl",
    "access": null,
    "description": null,
    "lineNumber": 697,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_sourcePositionsToGl",
    "memberof": "src/sofa/HrtfSet.js~HrtfSet",
    "longname": "src/sofa/HrtfSet.js~HrtfSet#_sourcePositionsToGl",
    "access": "private",
    "description": "Convert to GL coordinates, in-place.",
    "lineNumber": 710,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<coordinates>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<coordinates>"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sofa/ServerDataBase.js",
    "memberof": null,
    "longname": "src/sofa/ServerDataBase.js",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "content": "/**\n * @fileOverview Access a remote catalogue from a SOFA server, and get URLs\n * with filtering.\n *\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\nimport parseXml from './parseXml';\nimport { parseDataSet } from './parseDataSet';\n\n/**\n * SOFA remote data-base.\n */\nexport class ServerDataBase {\n  /**\n   * This is only a constructor, it does not load any thing.\n   *\n   * See {@link ServerDataBase#loadCatalogue}.\n   *\n   * @param {Object} [options]\n   * @param {String} [options.serverUrl] base URL of server, including\n   * protocol, eg. 'http://bili2.ircam.fr'.\n   */\n  constructor(options = {}) {\n    this._server = (typeof options.serverUrl !== 'undefined'\n                   ? options.serverUrl\n                   : 'http://bili2.ircam.fr');\n\n    this._catalogue = {};\n    this._urls = [];\n  }\n\n  /**\n   * Asynchronously load complete catalogue from the server, including the\n   * catalogue links found in any partial catalogue.\n   *\n   * @param {String} [sourceUrl] URL of the root catalogue, including the\n   * server, like 'http://bili2.ircam.fr/catalog.xml'.\n   *  Default is 'catalog.xml' at serverURL supplied at\n   * {@link ServerDataBase#constructor}.\n   * @param {Object} [destination] Catalogue to update. Default is\n   * internal.\n   * @returns {Promise.<String|Error>} The promise will resolve (with\n   * sourceUrl) when every sub-catalogue will successfully load, or will\n   * reject (with an error) as soon as one transfer fails.\n   */\n  loadCatalogue(sourceUrl = `${this._server}/catalog.xml`,\n                destination = this._catalogue) {\n    const promise = new Promise( (resolve, reject) => {\n      const request = new window.XMLHttpRequest();\n      request.open('GET', sourceUrl);\n      request.onerror = () => {\n        reject(new Error(`Unable to GET ${sourceUrl}, status ${request.status} `\n                         + `${request.responseText}`) );\n      };\n\n      request.onload = () => {\n        if (request.status < 200 || request.status >= 300) {\n          request.onerror();\n          return;\n        }\n\n        const xml = parseXml(request.response);\n        const dataSet = xml.querySelector('dataset');\n\n        // recursive catalogues\n        const catalogueReferences = xml.querySelectorAll('dataset > catalogRef');\n\n        if (catalogueReferences.length === 0) {\n          // end of recursion\n          destination.urls = [];\n          const urls = xml.querySelectorAll('dataset > dataset');\n          for (let ref = 0; ref < urls.length; ++ref) {\n            // data set name already contains a leading slash\n            const url = this._server\n                    + dataSet.getAttribute('name') + '/'\n                    + urls[ref].getAttribute('name');\n            this._urls.push(url);\n            destination.urls.push(url);\n          }\n\n          resolve(sourceUrl);\n        } else {\n          // recursion\n          const promises = [];\n          for (let ref = 0; ref < catalogueReferences.length; ++ref) {\n            const name = catalogueReferences[ref].getAttribute('name');\n            const recursiveUrl = this._server\n                    + dataSet.getAttribute('name') + '/'\n                    + catalogueReferences[ref].getAttribute('xlink:href');\n            destination[name] = {};\n            promises.push(this.loadCatalogue(recursiveUrl, destination[name]) );\n          }\n\n          Promise.all(promises)\n            .then( () => {\n              this._urls.sort();\n              resolve(sourceUrl);\n            })\n            .catch( (error) => {\n              reject(error);\n            });\n        }\n      }; // request.onload\n\n      request.send();\n    });\n\n    return promise;\n  }\n\n  /**\n   * Get URLs, possibly filtered.\n   *\n   * Any filter can be partial, and is case-insensitive. The result must\n   * match every supplied filter. Undefined filters are not applied.\n   *\n   * @param {Object} [options] optional filters\n   * @param {String} [options.convention] 'HRIR' or 'SOS'\n   * @param {String} [options.dataBase] 'LISTEN', 'BILI', etc.\n   * @param {String} [options.equalisation] 'RAW','COMPENSATED'\n   * @param {String} [options.sampleRate] in Hertz\n   * @param {String} [options.sosOrder] '12order' or '24order'\n   * @param {String} [options.freePattern] any pattern matched\n   * globally. Use separators (spaces, tabs, etc.) to combine multiple\n   * patterns: '44100 listen' will restrict on URLs matching '44100' and\n   * 'listen'\n   * @returns {Array.<String>} URLs that match every filter.\n   */\n  getUrls(options = {}) {\n    // the number and the order of the filters in the following array must\n    // match the URL sub-directories\n    const filters = [\n      options.convention,\n      options.dataBase,\n      options.equalisation,\n      options.sampleRate,\n      options.sosOrder, // in file name\n    ];\n\n    // any where in URL\n    const freePattern = (typeof options.freePattern === 'number'\n                         ? options.freePattern.toString()\n                         : options.freePattern);\n\n    const pattern = filters.reduce( (global, local) => {\n      // partial filter inside slashes\n      return `${global}/` + (typeof local !== 'undefined'\n                             ? `[^/]*${local}[^/]*`\n                             : '[^/]*');\n    }, '');\n\n    let regExp = new RegExp(pattern, 'i');\n\n    let urls = this._urls.filter( (url) => {\n      return regExp.test(url);\n    });\n\n    if (typeof freePattern !== 'undefined') {\n      // split patterns with separators\n      const patterns = freePattern.split(/\\s+/);\n      patterns.forEach( (current) => {\n        regExp = new RegExp(current, 'i');\n\n        urls = urls.filter( (url) => {\n          return regExp.test(url);\n        });\n      });\n    }\n\n    return urls;\n  }\n\n  /**\n   * Get all source positions of a given URL.\n   *\n   * @param {String} sourceUrl is the complete SOFA URL, with the\n   * server, like\n   * 'http://bili2.ircam.fr/SimpleFreeFieldHRIR/BILI/COMPENSATED/44100/IRC_1100_C_HRIR.sofa'\n   *\n   * @returns {Promise.<Object|String>} The promise will resolve after\n   * successfully loading, with definitions as * `{definition: {key: values}}`\n   * objects; the promise will reject is the transfer fails, with an error.\n   */\n  getDataSetDefinitions(sourceUrl) {\n    const promise = new Promise( (resolve, reject) => {\n      const url = `${sourceUrl}.dds`;\n      const request = new window.XMLHttpRequest();\n      request.open('GET', url);\n      request.onerror = () => {\n        reject(new Error(`Unable to GET ${url}, status ${request.status} `\n                         + `${request.responseText}`) );\n      };\n\n      request.onload = () => {\n        if (request.status < 200 || request.status >= 300) {\n          request.onerror();\n          return;\n        }\n        resolve(parseDataSet(request.response) );\n      }; // request.onload\n\n      request.send();\n    });\n\n    return promise;\n  }\n\n  /**\n   * Get all source positions of a given URL.\n   *\n   * @param {String} sourceUrl is the complete SOFA URL, with the\n   * server, like\n   * 'http://bili2.ircam.fr/SimpleFreeFieldHRIR/BILI/COMPENSATED/44100/IRC_1100_C_HRIR.sofa'\n   *\n   * @returns {Promise.<Array<Array.<Number>>|Error>} The promise will resolve\n   * after successfully loading, with an array of positions (which are\n   * arrays of 3 numbers); the promise will reject is the transfer fails,\n   * with an error.\n   */\n  getSourcePositions(sourceUrl) {\n    const promise = new Promise( (resolve, reject) => {\n      const url = `${sourceUrl}.json?SourcePosition`;\n\n      const request = new window.XMLHttpRequest();\n      request.open('GET', url);\n      request.onerror = () => {\n        reject(new Error(`Unable to GET ${url}, status ${request.status} `\n                         + `${request.responseText}`) );\n      };\n\n      request.onload = () => {\n        if (request.status < 200 || request.status >= 300) {\n          request.onerror();\n          return;\n        }\n\n        try {\n          const response = JSON.parse(request.response);\n          if (response.leaves[0].name !== 'SourcePosition') {\n            throw new Error('SourcePosition not found');\n          }\n\n          resolve(response.leaves[0].data);\n        } catch (error) {\n          // re-throw\n          reject(new Error(`Unable to parse response from ${url}. ${error.message}`) );\n        }\n      }; // request.onload\n\n      request.send();\n    });\n\n    return promise;\n  }\n\n}\n\nexport default ServerDataBase;\n"
  },
  {
    "__docId__": 174,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ServerDataBase",
    "memberof": "src/sofa/ServerDataBase.js",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase",
    "access": null,
    "export": true,
    "importPath": "binaural/src/sofa/ServerDataBase.js",
    "importStyle": "{ServerDataBase}",
    "description": "SOFA remote data-base.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 175,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#constructor",
    "access": null,
    "description": "This is only a constructor, it does not load any thing.\nSee {@link ServerDataBase#loadCatalogue}.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.serverUrl",
        "description": "base URL of server, including\nprotocol, eg. 'http://bili2.ircam.fr'."
      }
    ],
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_server",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#_server",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_catalogue",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#_catalogue",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_urls",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#_urls",
    "access": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "loadCatalogue",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#loadCatalogue",
    "access": null,
    "description": "Asynchronously load complete catalogue from the server, including the\ncatalogue links found in any partial catalogue.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<String|Error>} The promise will resolve (with\nsourceUrl) when every sub-catalogue will successfully load, or will\nreject (with an error) as soon as one transfer fails."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "sourceUrl",
        "description": "URL of the root catalogue, including the\nserver, like 'http://bili2.ircam.fr/catalog.xml'.\n Default is 'catalog.xml' at serverURL supplied at\n{@link ServerDataBase#constructor}."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "destination",
        "description": "Catalogue to update. Default is\ninternal."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<String",
        "Error>"
      ],
      "spread": false,
      "description": "The promise will resolve (with\nsourceUrl) when every sub-catalogue will successfully load, or will\nreject (with an error) as soon as one transfer fails."
    },
    "generator": false
  },
  {
    "__docId__": 180,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getUrls",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#getUrls",
    "access": null,
    "description": "Get URLs, possibly filtered.\nAny filter can be partial, and is case-insensitive. The result must\nmatch every supplied filter. Undefined filters are not applied.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<String>} URLs that match every filter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "optional filters"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.convention",
        "description": "'HRIR' or 'SOS'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.dataBase",
        "description": "'LISTEN', 'BILI', etc."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.equalisation",
        "description": "'RAW','COMPENSATED'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.sampleRate",
        "description": "in Hertz"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.sosOrder",
        "description": "'12order' or '24order'"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.freePattern",
        "description": "any pattern matched\nglobally. Use separators (spaces, tabs, etc.) to combine multiple\npatterns: '44100 listen' will restrict on URLs matching '44100' and\n'listen'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<String>"
      ],
      "spread": false,
      "description": "URLs that match every filter."
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getDataSetDefinitions",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#getDataSetDefinitions",
    "access": null,
    "description": "Get all source positions of a given URL.",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Object|String>} The promise will resolve after\nsuccessfully loading, with definitions as * `{definition: {key: values}}`\nobjects; the promise will reject is the transfer fails, with an error."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": "is the complete SOFA URL, with the\nserver, like\n'http://bili2.ircam.fr/SimpleFreeFieldHRIR/BILI/COMPENSATED/44100/IRC_1100_C_HRIR.sofa'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Object",
        "String>"
      ],
      "spread": false,
      "description": "The promise will resolve after\nsuccessfully loading, with definitions as * `{definition: {key: values}}`\nobjects; the promise will reject is the transfer fails, with an error."
    },
    "generator": false
  },
  {
    "__docId__": 182,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "getSourcePositions",
    "memberof": "src/sofa/ServerDataBase.js~ServerDataBase",
    "longname": "src/sofa/ServerDataBase.js~ServerDataBase#getSourcePositions",
    "access": null,
    "description": "Get all source positions of a given URL.",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<Array<Array.<Number>>|Error>} The promise will resolve\nafter successfully loading, with an array of positions (which are\narrays of 3 numbers); the promise will reject is the transfer fails,\nwith an error."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceUrl",
        "description": "is the complete SOFA URL, with the\nserver, like\n'http://bili2.ircam.fr/SimpleFreeFieldHRIR/BILI/COMPENSATED/44100/IRC_1100_C_HRIR.sofa'"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<Array<Array.<Number>>",
        "Error>"
      ],
      "spread": false,
      "description": "The promise will resolve\nafter successfully loading, with an array of positions (which are\narrays of 3 numbers); the promise will reject is the transfer fails,\nwith an error."
    },
    "generator": false
  },
  {
    "__docId__": 183,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sofa/index.js",
    "memberof": null,
    "longname": "src/sofa/index.js",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "content": "/**\n * @fileOverview Utility classes to handle the loading of HRTF files form a\n * SOFA server.\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\nimport HrtfSet from './HrtfSet';\nimport ServerDataBase from './ServerDataBase';\n\nexport default {\n  HrtfSet,\n  ServerDataBase,\n};\n"
  },
  {
    "__docId__": 184,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sofa/parseDataSet.js",
    "memberof": null,
    "longname": "src/sofa/parseDataSet.js",
    "access": null,
    "description": null,
    "lineNumber": 9,
    "content": "/**\n * @fileOverview Parser for DDS files\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n// '[R = 2]'\nconst _dimensionPattern = '\\\\[\\\\s*(\\\\w+)\\\\s*=\\\\s*(\\\\d+)\\\\s*\\\\]';\nconst _dimensionMatch = new RegExp(_dimensionPattern, 'g');\nconst _dimensionSplit = new RegExp(_dimensionPattern);\n\n// 'Float64 ReceiverPosition[R = 2][C = 3][I = 1];'\n//\n// do not re-use dimension pattern (for grouping)\nconst _definitionPattern = '\\\\s*(\\\\w+)\\\\s*([\\\\w.]+)\\\\s*'\n  + '((?:\\\\[[^\\\\]]+\\\\]\\\\s*)+)'\n  + ';\\\\s*';\nconst _definitionMatch = new RegExp(_definitionPattern, 'g');\nconst _definitionSplit = new RegExp(_definitionPattern);\n\n// `Dataset {\n//   Float64 ListenerPosition[I = 1][C = 3];\n//   Float64 ListenerUp[I = 1][C = 3];\n//   Float64 ListenerView[I = 1][C = 3];\n//   Float64 ReceiverPosition[R = 2][C = 3][I = 1];\n//   Float64 SourcePosition[M = 1680][C = 3];\n//   Float64 EmitterPosition[E = 1][C = 3][I = 1];\n//   Float64 Data.SamplingRate[I = 1];\n//   Float64 Data.Delay[I = 1][R = 2];\n//   Float64 Data.IR[M = 1680][R = 2][N = 941];\n//   Float64 RoomVolume[I = 1];\n// } IRC_1100_C_HRIR.sofa;`\n//\n// do not re-use definition pattern (for grouping)\nconst _dataSetPattern = '\\\\s*Dataset\\\\s*\\\\{\\\\s*'\n  + '((?:[^;]+;\\\\s*)*)'\n  + '\\\\s*\\\\}\\\\s*[\\\\w.]+\\\\s*;\\\\s*';\nconst _dataSetSplit = new RegExp(_dataSetPattern);\n\n/**\n * Parses dimension strings into an array of [key, value] pairs.\n *\n * @private\n * @param {String} input is single or multiple dimension\n * @returns {Array.<Array.<String>>} object [key, value] pairs\n *\n * @example\n * _parseDimension('[R = 2]');\n * // [ [ 'R', 2 ] ]\n *\n * _parseDimension('[R = 2][C = 3][I = 1]');\n * // [ [ 'R', 2 ], [ 'C', 3 ], [ 'I', 1 ] ]\n */\nexport function _parseDimension(input) {\n  const parse = [];\n  const inputs = input.match(_dimensionMatch);\n  if (inputs !== null) {\n    inputs.forEach( (inputSingle) => {\n      const parts = _dimensionSplit.exec(inputSingle);\n      if (parts !== null && parts.length > 2) {\n        parse.push([parts[1], Number(parts[2]) ]);\n      }\n    });\n  }\n  return parse;\n}\n\n/**\n * Parse definition strings into an array of [key, {values}] pairs.\n *\n * @param {String} input is single or multiple definition\n * @returns {Array.<Array<String,Object>>} [key, {values}] pairs\n *\n * @private\n * @example\n * _parseDefinition('Float64 ReceiverPosition[R = 2][C = 3][I = 1];');\n * // [ [ 'ReceiverPosition',\n * //     { type: 'Float64', R: 2, C: 3, I: 1 } ] ]\n *\n * _parseDefinition(\n * `    Float64 ReceiverPosition[R = 2][C = 3][I = 1];\n *      Float64 SourcePosition[M = 1680][C = 3];\n *      Float64 EmitterPosition[E = 1][C = 3][I = 1];`);\n * // [ [ 'ReceiverPosition',\n * //      { type: 'Float64', R: 2, C: 3, I: 1 } ],\n * //   [ 'SourcePosition', { type: 'Float64', M: 1680, C: 3 } ],\n * //   [ 'EmitterPosition',\n * //     { type: 'Float64', E: 1, C: 3, I: 1 } ] ]\n */\nexport function _parseDefinition(input) {\n  const parse = [];\n  const inputs = input.match(_definitionMatch);\n  if (inputs !== null) {\n    inputs.forEach( (inputSingle) => {\n      const parts = _definitionSplit.exec(inputSingle);\n      if (parts !== null && parts.length > 3) {\n        const current = [];\n        current[0] = parts[2];\n        current[1] = {};\n        current[1].type = parts[1];\n        _parseDimension(parts[3]).forEach( (dimension) => {\n          current[1][dimension[0] ] = dimension[1];\n        });\n        parse.push(current);\n      }\n    });\n  }\n  return parse;\n}\n\n/**\n * Parse data set meta data into an object of `{definition: {key: values}}` objects.\n *\n * @param {String} input data set DDS-like.\n * @returns {Object} definitions as `{definition: {key: values}}` objects.\n *\n * @example\n * _parseDataSet(\n * `Dataset {\n *      Float64 ReceiverPosition[R = 2][C = 3][I = 1];\n *      Float64 SourcePosition[M = 1680][C = 3];\n *      Float64 EmitterPosition[E = 1][C = 3][I = 1];\n *      Float64 Data.SamplingRate[I = 1];\n * } IRC_1100_C_HRIR.sofa;`);\n * //  { ReceiverPosition: { type: 'Float64', R: 2, C: 3, I: 1 },\n * //    SourcePosition: { type: 'Float64', M: 1680, C: 3 },\n * //    EmitterPosition: { type: 'Float64', E: 1, C: 3, I: 1 }\n * //    'Data.SamplingRate': { type: 'Float64', I: 1 } }\n */\nexport function parseDataSet(input) {\n  const parse = {};\n  const definitions = _dataSetSplit.exec(input);\n  if (definitions !== null && definitions.length > 1) {\n    _parseDefinition(definitions[1]).forEach( (definition) => {\n      parse[definition[0] ] = definition[1];\n    });\n  }\n  return parse;\n}\n\nexport default parseDataSet;\n"
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_dimensionPattern",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_dimensionPattern",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@fileOverview",
        "tagValue": "Parser for DDS files"
      },
      {
        "tagName": "@author",
        "tagValue": "Jean-Philippe.Lambert@ircam.fr"
      },
      {
        "tagName": "@copyright",
        "tagValue": "2015-2016 IRCAM, Paris, France"
      },
      {
        "tagName": "@license",
        "tagValue": "BSD-3-Clause"
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_dimensionMatch",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_dimensionMatch",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "RegExp"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_dimensionSplit",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_dimensionSplit",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "RegExp"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_definitionPattern",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_definitionPattern",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_definitionMatch",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_definitionMatch",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "RegExp"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_definitionSplit",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_definitionSplit",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "RegExp"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_dataSetPattern",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_dataSetPattern",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_dataSetSplit",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_dataSetSplit",
    "access": null,
    "export": false,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "RegExp"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_parseDimension",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_parseDimension",
    "access": "private",
    "export": true,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": "{_parseDimension}",
    "description": "Parses dimension strings into an array of [key, value] pairs.",
    "examples": [
      "_parseDimension('[R = 2]');\n// [ [ 'R', 2 ] ]\n_parseDimension('[R = 2][C = 3][I = 1]');\n// [ [ 'R', 2 ], [ 'C', 3 ], [ 'I', 1 ] ]"
    ],
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<Array.<String>>} object [key, value] pairs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "is single or multiple dimension"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Array.<String>>"
      ],
      "spread": false,
      "description": "object [key, value] pairs"
    },
    "generator": false
  },
  {
    "__docId__": 194,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_parseDefinition",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~_parseDefinition",
    "access": "private",
    "export": true,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": "{_parseDefinition}",
    "description": "Parse definition strings into an array of [key, {values}] pairs.",
    "examples": [
      "_parseDefinition('Float64 ReceiverPosition[R = 2][C = 3][I = 1];');\n// [ [ 'ReceiverPosition',\n//     { type: 'Float64', R: 2, C: 3, I: 1 } ] ]\n_parseDefinition(\n`    Float64 ReceiverPosition[R = 2][C = 3][I = 1];\n     Float64 SourcePosition[M = 1680][C = 3];\n     Float64 EmitterPosition[E = 1][C = 3][I = 1];`);\n// [ [ 'ReceiverPosition',\n//      { type: 'Float64', R: 2, C: 3, I: 1 } ],\n//   [ 'SourcePosition', { type: 'Float64', M: 1680, C: 3 } ],\n//   [ 'EmitterPosition',\n//     { type: 'Float64', E: 1, C: 3, I: 1 } ] ]"
    ],
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<Array<String,Object>>} [key, {values}] pairs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "is single or multiple definition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Array<String,Object>>"
      ],
      "spread": false,
      "description": "[key, {values}] pairs"
    },
    "generator": false
  },
  {
    "__docId__": 195,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseDataSet",
    "memberof": "src/sofa/parseDataSet.js",
    "longname": "src/sofa/parseDataSet.js~parseDataSet",
    "access": null,
    "export": true,
    "importPath": "binaural/src/sofa/parseDataSet.js",
    "importStyle": "{parseDataSet}",
    "description": "Parse data set meta data into an object of `{definition: {key: values}}` objects.",
    "examples": [
      "_parseDataSet(\n`Dataset {\n     Float64 ReceiverPosition[R = 2][C = 3][I = 1];\n     Float64 SourcePosition[M = 1680][C = 3];\n     Float64 EmitterPosition[E = 1][C = 3][I = 1];\n     Float64 Data.SamplingRate[I = 1];\n} IRC_1100_C_HRIR.sofa;`);\n//  { ReceiverPosition: { type: 'Float64', R: 2, C: 3, I: 1 },\n//    SourcePosition: { type: 'Float64', M: 1680, C: 3 },\n//    EmitterPosition: { type: 'Float64', E: 1, C: 3, I: 1 }\n//    'Data.SamplingRate': { type: 'Float64', I: 1 } }"
    ],
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} definitions as `{definition: {key: values}}` objects."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": "data set DDS-like."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "definitions as `{definition: {key: values}}` objects."
    },
    "generator": false
  },
  {
    "__docId__": 196,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sofa/parseSofa.js",
    "memberof": null,
    "longname": "src/sofa/parseSofa.js",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "content": "/**\n * @fileOverview Parser functions for SOFA files\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n/**\n * Parses a SOFA JSON string with into an object with `data` and `metaData`\n * attributes.\n *\n * @param {String} sofaString\n * @returns {Object} with `data` and `metaData` attributes\n * @throws {Error} when the parsing fails\n */\nexport function parseSofa(sofaString) {\n  try {\n    const sofa = JSON.parse(sofaString);\n    const hrtf = {};\n\n    hrtf.name = sofa.name;\n\n    if (typeof sofa.attributes !== 'undefined') {\n      hrtf.metaData = {};\n      const metaData = sofa.attributes.find( (e) => {\n        return e.name === 'NC_GLOBAL';\n      });\n      if (typeof metaData !== 'undefined') {\n        metaData.attributes.forEach( (e) => {\n          hrtf.metaData[e.name] = e.value[0];\n        });\n      }\n    }\n\n    if (typeof sofa.leaves !== 'undefined') {\n      const data = sofa.leaves;\n      data.forEach( (d) => {\n        hrtf[d.name] = {};\n        d.attributes.forEach( (a) => {\n          hrtf[d.name][a.name] = a.value[0];\n        });\n        hrtf[d.name].shape = d.shape;\n        hrtf[d.name].data = d.data;\n      });\n    }\n\n    return hrtf;\n  } catch (error) {\n    throw new Error(`Unable to parse SOFA string. ${error.message}`);\n  }\n}\n\n/**\n * Prefix SOFA coordinates type with `sofa`.\n *\n * @param {String} sofaType : either `cartesian` or `spherical`\n * @returns {String} either `sofaCartesian` or `sofaSpherical`\n * @throws {Error} if sofaType is unknown\n */\nexport function conformSofaType(sofaType) {\n  let type;\n\n  switch (sofaType) {\n    case ('cartesian'):\n      type = 'sofaCartesian';\n      break;\n\n    case ('spherical'):\n      type = 'sofaSpherical';\n      break;\n\n    default:\n      throw new Error(`Bad SOFA type ${sofaType}`);\n  }\n  return type;\n}\n\nexport default {\n  parseSofa,\n  conformSofaType,\n};\n"
  },
  {
    "__docId__": 197,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "parseSofa",
    "memberof": "src/sofa/parseSofa.js",
    "longname": "src/sofa/parseSofa.js~parseSofa",
    "access": null,
    "export": true,
    "importPath": "binaural/src/sofa/parseSofa.js",
    "importStyle": "{parseSofa}",
    "description": "Parses a SOFA JSON string with into an object with `data` and `metaData`\nattributes.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} with `data` and `metaData` attributes"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sofaString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "with `data` and `metaData` attributes"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "when the parsing fails"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 198,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "conformSofaType",
    "memberof": "src/sofa/parseSofa.js",
    "longname": "src/sofa/parseSofa.js~conformSofaType",
    "access": null,
    "export": true,
    "importPath": "binaural/src/sofa/parseSofa.js",
    "importStyle": "{conformSofaType}",
    "description": "Prefix SOFA coordinates type with `sofa`.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} either `sofaCartesian` or `sofaSpherical`"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "sofaType",
        "description": ": either `cartesian` or `spherical`"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "either `sofaCartesian` or `sofaSpherical`"
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if sofaType is unknown"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 199,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/sofa/parseXml.js",
    "memberof": null,
    "longname": "src/sofa/parseXml.js",
    "access": null,
    "description": null,
    "lineNumber": 31,
    "content": "/**\n * @fileOverview Simple XML parser, as a DOM parser.\n * @author Jean-Philippe.Lambert@ircam.fr\n * @copyright 2015-2016 IRCAM, Paris, France\n * @license BSD-3-Clause\n */\n\n/**\n * Parse an XML string into an XMLDocument object, using native browser DOM\n * parser.\n *\n * It requires a browser environment.\n *\n * @function parseXml\n * @param {String} xmlStr full valid XML data.\n * @returns {Object} XMLDocument, DOM-like. (Use any selector.)\n *\n * @example\n * const request = new window.XMLHttpRequest();\n * request.open('GET', 'http://bili2.ircam.fr/catalog.xml');\n * request.onerror =  () => {\n *    throw new Error(`Unable to GET: ${request.status}`);\n * };\n * request.onload = () => {\n *   const xml = parseXml(request.response);\n *   const catalogueReferences = xml.querySelector('dataset > catalogRef');\n *   console.log(catalogueReferences);\n * }\n * request.send();\n */\nexport let parseXml;\n\nif (typeof window.DOMParser !== 'undefined') {\n  parseXml = function parseXmlDOM(xmlStr) {\n    return (new window.DOMParser()).parseFromString(xmlStr, 'text/xml');\n  };\n} else if (typeof window.ActiveXObject !== 'undefined' &&\n           new window.ActiveXObject('Microsoft.XMLDOM')) {\n  parseXml = function parseXmlActiveX(xmlStr) {\n    const xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n    xmlDoc.async = 'false';\n    xmlDoc.loadXML(xmlStr);\n    return xmlDoc;\n  };\n} else {\n  throw new Error('No XML parser found');\n}\n\nexport default parseXml;\n"
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 228,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 238,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 239,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 240,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 241,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 242,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 243,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 244,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 245,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 246,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 247,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 249,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 250,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 251,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 252,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 253,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 254,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 255,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 256,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": null,
    "builtinExternal": true
  }
]